{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nMedBook is a comprehensive healthcare management system built as a fullstack web application for managing medical appointments, prescriptions, and patient care. The system serves three user roles: administrators who manage the overall system, doctors who handle patient appointments and prescriptions, and patients who book appointments and access their medical records.\n\nThe application provides role-based dashboards with specialized functionality for each user type, including appointment scheduling, prescription management, and administrative oversight of the healthcare system.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side is built with React 18 using TypeScript and follows a component-based architecture. The application uses:\n- **React Router** for client-side navigation with role-based routing\n- **Context API** for state management (AuthContext and AppContext)\n- **Custom hooks** for data fetching and state management\n- **shadcn/ui** component library built on top of Radix UI primitives\n- **Tailwind CSS** for styling with a design system approach\n- **Date-fns** for date manipulation and formatting\n\nThe frontend implements a clean separation of concerns with dedicated contexts for authentication and application state, reusable UI components, and role-specific page components.\n\n## Backend Architecture\nThe server follows an Express.js REST API pattern with:\n- **Express.js** as the web framework with middleware for request logging and error handling\n- **TypeScript** for type safety across the entire stack\n- **Shared schema definitions** between client and server using Drizzle ORM\n- **Storage abstraction layer** with interface-based design for database operations\n- **Development/production environment handling** with Vite integration for development\n\nThe backend uses a repository pattern through the storage interface, allowing for easy testing and potential database switching.\n\n## Database Design\nThe system uses PostgreSQL as the primary database with Drizzle ORM for schema management and queries:\n- **Users table** - Core user information with role-based access (admin, doctor, patient)\n- **Doctors table** - Extended doctor profiles with specialization, experience, and availability\n- **Patients table** - Patient-specific information including demographics\n- **Appointments table** - Appointment scheduling with status tracking\n- **Prescriptions table** - Medical prescriptions linked to appointments\n\nThe schema uses UUID primary keys and proper foreign key relationships with cascade deletes for data integrity.\n\n## Authentication System\nThe application implements a role-based authentication system:\n- **Multi-role login** with separate login flows for patients, doctors, and administrators\n- **Demo user system** for development with hardcoded credentials\n- **JWT-style session management** using localStorage for client-side session persistence\n- **Role-based route protection** preventing unauthorized access to role-specific features\n\n## State Management\nThe application uses React Context for global state management:\n- **AuthContext** manages user authentication state and login/logout operations\n- **AppContext** handles application data including doctors, appointments, and prescriptions\n- **Local component state** for form handling and UI interactions\n\n# External Dependencies\n\n## Database and ORM\n- **Neon Database** (@neondatabase/serverless) - Serverless PostgreSQL database provider\n- **Drizzle ORM** (drizzle-orm) - Type-safe ORM for database operations and schema management\n- **Drizzle Kit** (drizzle-kit) - Database migration and schema management tools\n\n## UI and Styling\n- **Radix UI** - Comprehensive set of low-level UI primitives for building accessible interfaces\n- **Tailwind CSS** - Utility-first CSS framework for styling\n- **shadcn/ui** - Pre-built component library based on Radix UI\n- **Lucide React** - Icon library for consistent iconography\n- **Class Variance Authority** - Utility for creating component variants\n\n## Development Tools\n- **Vite** - Build tool and development server with React plugin support\n- **TypeScript** - Type checking and enhanced developer experience\n- **ESBuild** - Fast JavaScript bundler for production builds\n- **PostCSS** - CSS processing with Tailwind CSS integration\n\n## Utility Libraries\n- **React Hook Form** (@hookform/resolvers) - Form handling and validation\n- **TanStack Query** (@tanstack/react-query) - Server state management and caching\n- **Date-fns** - Date manipulation and formatting utilities\n- **Zod** - Schema validation for forms and API responses\n- **clsx** - Conditional className utility\n- **jsPDF** - PDF generation for prescription downloads\n\n## Session Management\n- **Connect PG Simple** (connect-pg-simple) - PostgreSQL session store for Express sessions\n- **WebSocket** (ws) - WebSocket implementation for real-time features\n\nThe application is configured to run on Replit with specific Replit integration plugins for development environment support.","size_bytes":5086},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertDoctorSchema, insertPatientSchema, insertAppointmentSchema, insertPrescriptionSchema } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\n// Initialize admin user if it doesn't exist\nasync function initializeAdmin() {\n  try {\n    const existingAdmin = await storage.getUserByEmail('admin@medbook.com');\n    if (!existingAdmin) {\n      const hashedPassword = await bcrypt.hash('admin123', 10);\n      await storage.createUser({\n        email: 'admin@medbook.com',\n        password: hashedPassword,\n        name: 'System Administrator',\n        phone: '+1-555-0100',\n        role: 'admin'\n      });\n      console.log('Admin user created: admin@medbook.com / admin123');\n    }\n  } catch (error) {\n    console.error('Error initializing admin:', error);\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize admin user on startup\n  await initializeAdmin();\n\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        res.status(400).json({ message: 'Email and password are required', success: false });\n        return;\n      }\n\n      // Find user in database\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        res.status(401).json({ message: 'Invalid credentials', success: false });\n        return;\n      }\n\n      // Verify password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        res.status(401).json({ message: 'Invalid credentials', success: false });\n        return;\n      }\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ data: userWithoutPassword, success: true });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: 'Internal server error', success: false });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        res.status(400).json({ message: 'User with this email already exists', success: false });\n        return;\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      const userToCreate = { ...userData, password: hashedPassword };\n      \n      const user = await storage.createUser(userToCreate);\n      \n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ data: userWithoutPassword, success: true });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(400).json({ message: 'Registration failed', success: false });\n    }\n  });\n\n  // Admin route to create doctor accounts\n  app.post(\"/api/admin/doctors\", async (req, res) => {\n    try {\n      const { email, password, name, phone, specialization, experience } = req.body;\n      \n      if (!email || !password || !name || !phone || !specialization) {\n        res.status(400).json({ message: 'All fields are required', success: false });\n        return;\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        res.status(400).json({ message: 'User with this email already exists', success: false });\n        return;\n      }\n\n      // Hash password and create user\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const user = await storage.createUser({\n        email,\n        password: hashedPassword,\n        name,\n        phone,\n        role: 'doctor'\n      });\n\n      // Create doctor profile\n      const doctor = await storage.createDoctor({\n        userId: user.id,\n        specialization,\n        experience: experience || 0,\n        availability: [{}],\n        leaveDays: [],\n        isActive: true\n      });\n\n      res.json({ \n        data: { user: { ...user, password: undefined }, doctor }, \n        success: true \n      });\n    } catch (error) {\n      console.error('Error creating doctor:', error);\n      res.status(500).json({ message: 'Failed to create doctor account', success: false });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        res.status(404).json({ message: 'User not found' });\n        return;\n      }\n      res.json(user);\n    } catch (error) {\n      console.error('Get user error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Doctor routes\n  app.get(\"/api/doctors\", async (req, res) => {\n    try {\n      const doctors = await storage.getDoctors();\n      res.json(doctors);\n    } catch (error) {\n      console.error('Get doctors error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.get(\"/api/doctors/:userId\", async (req, res) => {\n    try {\n      const doctor = await storage.getDoctor(req.params.userId);\n      if (!doctor) {\n        res.status(404).json({ message: 'Doctor not found' });\n        return;\n      }\n      res.json(doctor);\n    } catch (error) {\n      console.error('Get doctor error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post(\"/api/doctors\", async (req, res) => {\n    try {\n      const doctorData = insertDoctorSchema.parse(req.body);\n      const doctor = await storage.createDoctor(doctorData);\n      res.json(doctor);\n    } catch (error) {\n      console.error('Create doctor error:', error);\n      res.status(400).json({ message: 'Failed to create doctor' });\n    }\n  });\n\n  app.put(\"/api/doctors/:userId\", async (req, res) => {\n    try {\n      const doctor = await storage.updateDoctor(req.params.userId, req.body);\n      if (!doctor) {\n        res.status(404).json({ message: 'Doctor not found' });\n        return;\n      }\n      res.json(doctor);\n    } catch (error) {\n      console.error('Update doctor error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Patient routes\n  app.get(\"/api/patients\", async (req, res) => {\n    try {\n      const patients = await storage.getPatients();\n      res.json(patients);\n    } catch (error) {\n      console.error('Get patients error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post(\"/api/patients\", async (req, res) => {\n    try {\n      const patientData = insertPatientSchema.parse(req.body);\n      const patient = await storage.createPatient(patientData);\n      res.json(patient);\n    } catch (error) {\n      console.error('Create patient error:', error);\n      res.status(400).json({ message: 'Failed to create patient' });\n    }\n  });\n\n  // Appointment routes\n  app.get(\"/api/appointments\", async (req, res) => {\n    try {\n      const { patientId, doctorId } = req.query;\n      \n      let appointments;\n      if (patientId) {\n        appointments = await storage.getAppointmentsByPatient(patientId as string);\n      } else if (doctorId) {\n        appointments = await storage.getAppointmentsByDoctor(doctorId as string);\n      } else {\n        appointments = await storage.getAppointments();\n      }\n      \n      res.json(appointments);\n    } catch (error) {\n      console.error('Get appointments error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post(\"/api/appointments\", async (req, res) => {\n    try {\n      const appointmentData = insertAppointmentSchema.parse(req.body);\n      const appointment = await storage.createAppointment(appointmentData);\n      res.json(appointment);\n    } catch (error) {\n      console.error('Create appointment error:', error);\n      res.status(400).json({ message: 'Failed to create appointment' });\n    }\n  });\n\n  app.put(\"/api/appointments/:id\", async (req, res) => {\n    try {\n      const appointment = await storage.updateAppointment(req.params.id, req.body);\n      if (!appointment) {\n        res.status(404).json({ message: 'Appointment not found' });\n        return;\n      }\n      res.json(appointment);\n    } catch (error) {\n      console.error('Update appointment error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Prescription routes\n  app.get(\"/api/prescriptions\", async (req, res) => {\n    try {\n      const { patientId, doctorId } = req.query;\n      \n      let prescriptions;\n      if (patientId) {\n        prescriptions = await storage.getPrescriptionsByPatient(patientId as string);\n      } else if (doctorId) {\n        prescriptions = await storage.getPrescriptionsByDoctor(doctorId as string);\n      } else {\n        prescriptions = await storage.getPrescriptions();\n      }\n      \n      res.json(prescriptions);\n    } catch (error) {\n      console.error('Get prescriptions error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post(\"/api/prescriptions\", async (req, res) => {\n    try {\n      const prescriptionData = insertPrescriptionSchema.parse(req.body);\n      const prescription = await storage.createPrescription(prescriptionData);\n      res.json(prescription);\n    } catch (error) {\n      console.error('Create prescription error:', error);\n      res.status(400).json({ message: 'Failed to create prescription' });\n    }\n  });\n\n  app.put(\"/api/prescriptions/:id\", async (req, res) => {\n    try {\n      const prescription = await storage.updatePrescription(req.params.id, req.body);\n      if (!prescription) {\n        res.status(404).json({ message: 'Prescription not found' });\n        return;\n      }\n      res.json(prescription);\n    } catch (error) {\n      console.error('Update prescription error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10224},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { eq, and } from \"drizzle-orm\";\nimport { \n  users, doctors, patients, appointments, prescriptions,\n  type User, type Doctor, type Patient, type Appointment, type Prescription,\n  type InsertUser, type InsertDoctor, type InsertPatient, type InsertAppointment, type InsertPrescription\n} from \"@shared/schema\";\n\nconst connectionString = process.env.DATABASE_URL!;\nconst client = postgres(connectionString);\nconst db = drizzle(client);\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  // Doctor operations\n  getDoctors(): Promise<(Doctor & { user: User })[]>;\n  getDoctor(userId: string): Promise<(Doctor & { user: User }) | undefined>;\n  createDoctor(doctor: InsertDoctor): Promise<Doctor>;\n  updateDoctor(userId: string, updates: Partial<Doctor>): Promise<Doctor | undefined>;\n  \n  // Patient operations\n  getPatients(): Promise<(Patient & { user: User })[]>;\n  getPatient(userId: string): Promise<(Patient & { user: User }) | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(userId: string, updates: Partial<Patient>): Promise<Patient | undefined>;\n  \n  // Appointment operations\n  getAppointments(): Promise<Appointment[]>;\n  getAppointmentsByPatient(patientId: string): Promise<Appointment[]>;\n  getAppointmentsByDoctor(doctorId: string): Promise<Appointment[]>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, updates: Partial<Appointment>): Promise<Appointment | undefined>;\n  \n  // Prescription operations\n  getPrescriptions(): Promise<Prescription[]>;\n  getPrescriptionsByPatient(patientId: string): Promise<Prescription[]>;\n  getPrescriptionsByDoctor(doctorId: string): Promise<Prescription[]>;\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  updatePrescription(id: string, updates: Partial<Prescription>): Promise<Prescription | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values([{\n      ...user,\n      role: user.role as 'admin' | 'doctor' | 'patient'\n    }]).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const result = await db.update(users).set({ ...updates, updatedAt: new Date() }).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  // Doctor operations\n  async getDoctors(): Promise<(Doctor & { user: User })[]> {\n    const result = await db.select()\n      .from(doctors)\n      .innerJoin(users, eq(doctors.userId, users.id));\n    \n    return result.map(row => ({\n      ...row.doctors,\n      user: row.users\n    }));\n  }\n\n  async getDoctor(userId: string): Promise<(Doctor & { user: User }) | undefined> {\n    const result = await db.select()\n      .from(doctors)\n      .innerJoin(users, eq(doctors.userId, users.id))\n      .where(eq(doctors.userId, userId))\n      .limit(1);\n    \n    if (result.length === 0) return undefined;\n    \n    return {\n      ...result[0].doctors,\n      user: result[0].users\n    };\n  }\n\n  async createDoctor(doctor: InsertDoctor): Promise<Doctor> {\n    const result = await db.insert(doctors).values([doctor]).returning();\n    return result[0];\n  }\n\n  async updateDoctor(userId: string, updates: Partial<Doctor>): Promise<Doctor | undefined> {\n    const result = await db.update(doctors).set({ ...updates, updatedAt: new Date() }).where(eq(doctors.userId, userId)).returning();\n    return result[0];\n  }\n\n  // Patient operations\n  async getPatients(): Promise<(Patient & { user: User })[]> {\n    const result = await db.select()\n      .from(patients)\n      .innerJoin(users, eq(patients.userId, users.id));\n    \n    return result.map(row => ({\n      ...row.patients,\n      user: row.users\n    }));\n  }\n\n  async getPatient(userId: string): Promise<(Patient & { user: User }) | undefined> {\n    const result = await db.select()\n      .from(patients)\n      .innerJoin(users, eq(patients.userId, users.id))\n      .where(eq(patients.userId, userId))\n      .limit(1);\n    \n    if (result.length === 0) return undefined;\n    \n    return {\n      ...result[0].patients,\n      user: result[0].users\n    };\n  }\n\n  async createPatient(patient: InsertPatient): Promise<Patient> {\n    const result = await db.insert(patients).values([patient]).returning();\n    return result[0];\n  }\n\n  async updatePatient(userId: string, updates: Partial<Patient>): Promise<Patient | undefined> {\n    const result = await db.update(patients).set({ ...updates, updatedAt: new Date() }).where(eq(patients.userId, userId)).returning();\n    return result[0];\n  }\n\n  // Appointment operations\n  async getAppointments(): Promise<Appointment[]> {\n    const result = await db.select().from(appointments);\n    return result;\n  }\n\n  async getAppointmentsByPatient(patientId: string): Promise<Appointment[]> {\n    const result = await db.select().from(appointments).where(eq(appointments.patientId, patientId));\n    return result;\n  }\n\n  async getAppointmentsByDoctor(doctorId: string): Promise<Appointment[]> {\n    const result = await db.select().from(appointments).where(eq(appointments.doctorId, doctorId));\n    return result;\n  }\n\n  async createAppointment(appointment: InsertAppointment): Promise<Appointment> {\n    const result = await db.insert(appointments).values([{\n      ...appointment,\n      status: appointment.status as 'pending' | 'confirmed' | 'rejected' | 'cancelled' | 'completed' | undefined\n    }]).returning();\n    return result[0];\n  }\n\n  async updateAppointment(id: string, updates: Partial<Appointment>): Promise<Appointment | undefined> {\n    const result = await db.update(appointments).set({ ...updates, updatedAt: new Date() }).where(eq(appointments.id, id)).returning();\n    return result[0];\n  }\n\n  // Prescription operations\n  async getPrescriptions(): Promise<Prescription[]> {\n    const result = await db.select().from(prescriptions);\n    return result;\n  }\n\n  async getPrescriptionsByPatient(patientId: string): Promise<Prescription[]> {\n    const result = await db.select().from(prescriptions).where(eq(prescriptions.patientId, patientId));\n    return result;\n  }\n\n  async getPrescriptionsByDoctor(doctorId: string): Promise<Prescription[]> {\n    const result = await db.select().from(prescriptions).where(eq(prescriptions.doctorId, doctorId));\n    return result;\n  }\n\n  async createPrescription(prescription: InsertPrescription): Promise<Prescription> {\n    const result = await db.insert(prescriptions).values([prescription]).returning();\n    return result[0];\n  }\n\n  async updatePrescription(id: string, updates: Partial<Prescription>): Promise<Prescription | undefined> {\n    const result = await db.update(prescriptions).set({ ...updates, updatedAt: new Date() }).where(eq(prescriptions.id, id)).returning();\n    return result[0];\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7572},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, uuid, integer, boolean, date, time, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  role: text(\"role\").notNull().$type<'admin' | 'doctor' | 'patient'>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Doctors table\nexport const doctors = pgTable(\"doctors\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  specialization: text(\"specialization\").notNull(),\n  experience: integer(\"experience\").default(0),\n  availability: jsonb(\"availability\").default([]).$type<any>(),\n  leaveDays: text(\"leave_days\").array().default([]),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Patients table\nexport const patients = pgTable(\"patients\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  dateOfBirth: date(\"date_of_birth\").notNull(),\n  address: text(\"address\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Appointments table\nexport const appointments = pgTable(\"appointments\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  patientId: uuid(\"patient_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  doctorId: uuid(\"doctor_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  date: date(\"date\").notNull(),\n  time: time(\"time\").notNull(),\n  status: text(\"status\").default('pending').$type<'pending' | 'confirmed' | 'rejected' | 'cancelled' | 'completed'>(),\n  reason: text(\"reason\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Prescriptions table\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  appointmentId: uuid(\"appointment_id\").references(() => appointments.id, { onDelete: \"cascade\" }),\n  patientId: uuid(\"patient_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  doctorId: uuid(\"doctor_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  medications: text(\"medications\").notNull(),\n  instructions: text(\"instructions\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDoctorSchema = createInsertSchema(doctors).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertDoctor = z.infer<typeof insertDoctorSchema>;\nexport type Doctor = typeof doctors.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\nexport type Prescription = typeof prescriptions.$inferSelect;\n","size_bytes":4039},"client/src/App.tsx":{"content":"import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport { AppProvider } from './contexts/AppContext';\nimport Layout from './components/Layout';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport LoadingSpinner from './components/LoadingSpinner';\n\n// Auth Components\nimport UserLogin from './components/auth/UserLogin';\nimport DoctorLogin from './components/auth/DoctorLogin';\nimport AdminLogin from './components/auth/AdminLogin';\nimport Register from './components/auth/Register';\nimport ForgotPassword from './components/auth/ForgotPassword';\n\n// Patient Pages\nimport PatientDashboard from './pages/PatientDashboard';\nimport BookAppointment from './pages/BookAppointment';\nimport PatientAppointments from './pages/PatientAppointments';\nimport PatientPrescriptions from './pages/PatientPrescriptions';\n\n// Doctor Pages\nimport DoctorDashboard from './pages/DoctorDashboard';\nimport DoctorAppointments from './pages/DoctorAppointments';\n\n// Admin Pages\nimport AdminDashboard from './pages/AdminDashboard';\nimport AdminDoctorManagement from './pages/admin/AdminDoctorManagement';\nimport AdminPatientManagement from './pages/admin/AdminPatientManagement';\n\n// Doctor Pages - Additional\nimport DoctorPrescriptions from './pages/doctor/DoctorPrescriptions';\n\nconst AppContent: React.FC = () => {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  if (!user) {\n    return (\n      <Routes>\n        <Route path=\"/login\" element={<UserLogin />} />\n        <Route path=\"/doctor/login\" element={<DoctorLogin />} />\n        <Route path=\"/admin/login\" element={<AdminLogin />} />\n        <Route path=\"/register\" element={<Register />} />\n        <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n        <Route path=\"*\" element={<Navigate to=\"/login\" replace />} />\n      </Routes>\n    );\n  }\n\n  const getDefaultRoute = () => {\n    switch (user.role) {\n      case 'admin': return '/admin';\n      case 'doctor': return '/doctor';\n      case 'patient': return '/patient';\n      default: return '/login';\n    }\n  };\n\n  return (\n    <Layout>\n      <Routes>\n        {/* Redirect to appropriate dashboard */}\n        <Route path=\"/\" element={<Navigate to={getDefaultRoute()} replace />} />\n        \n        {/* Patient Routes */}\n        <Route path=\"/patient\" element={\n          <ProtectedRoute allowedRoles={['patient']}>\n            <PatientDashboard />\n          </ProtectedRoute>\n        } />\n        <Route path=\"/patient/book\" element={\n          <ProtectedRoute allowedRoles={['patient']}>\n            <BookAppointment />\n          </ProtectedRoute>\n        } />\n        <Route path=\"/patient/appointments\" element={\n          <ProtectedRoute allowedRoles={['patient']}>\n            <PatientAppointments />\n          </ProtectedRoute>\n        } />\n        <Route path=\"/patient/prescriptions\" element={\n          <ProtectedRoute allowedRoles={['patient']}>\n            <PatientPrescriptions />\n          </ProtectedRoute>\n        } />\n\n        {/* Doctor Routes */}\n        <Route path=\"/doctor\" element={\n          <ProtectedRoute allowedRoles={['doctor']}>\n            <DoctorDashboard />\n          </ProtectedRoute>\n        } />\n        <Route path=\"/doctor/appointments\" element={\n          <ProtectedRoute allowedRoles={['doctor']}>\n            <DoctorAppointments />\n          </ProtectedRoute>\n        } />\n        <Route path=\"/doctor/prescriptions\" element={\n          <ProtectedRoute allowedRoles={['doctor']}>\n            <DoctorPrescriptions />\n          </ProtectedRoute>\n        } />\n        <Route path=\"/doctor/availability\" element={\n          <ProtectedRoute allowedRoles={['doctor']}>\n            <div className=\"text-center py-12\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">Availability Management</h2>\n              <p className=\"text-gray-600 mt-2\">Coming soon - Set your working hours and leave days</p>\n            </div>\n          </ProtectedRoute>\n        } />\n\n        {/* Admin Routes */}\n        <Route path=\"/admin\" element={\n          <ProtectedRoute allowedRoles={['admin']}>\n            <AdminDashboard />\n          </ProtectedRoute>\n        } />\n        <Route path=\"/admin/doctors\" element={\n          <ProtectedRoute allowedRoles={['admin']}>\n            <AdminDoctorManagement />\n          </ProtectedRoute>\n        } />\n        <Route path=\"/admin/appointments\" element={\n          <ProtectedRoute allowedRoles={['admin']}>\n            <div className=\"text-center py-12\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">All Appointments</h2>\n              <p className=\"text-gray-600 mt-2\">Coming soon - System-wide appointment overview</p>\n            </div>\n          </ProtectedRoute>\n        } />\n        <Route path=\"/admin/patients\" element={\n          <ProtectedRoute allowedRoles={['admin']}>\n            <AdminPatientManagement />\n          </ProtectedRoute>\n        } />\n        <Route path=\"/admin/prescriptions\" element={\n          <ProtectedRoute allowedRoles={['admin']}>\n            <div className=\"text-center py-12\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">All Prescriptions</h2>\n              <p className=\"text-gray-600 mt-2\">Coming soon - System-wide prescription overview</p>\n            </div>\n          </ProtectedRoute>\n        } />\n\n        {/* Fallback */}\n        <Route path=\"*\" element={<Navigate to={getDefaultRoute()} replace />} />\n      </Routes>\n    </Layout>\n  );\n};\n\nfunction App() {\n  return (\n    <Router>\n      <AuthProvider>\n        <AppProvider>\n          <AppContent />\n        </AppProvider>\n      </AuthProvider>\n    </Router>\n  );\n}\n\nexport default App;","size_bytes":5783},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n","size_bytes":59},"client/src/main.tsx":{"content":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","size_bytes":234},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/components/Layout.tsx":{"content":"import React, { ReactNode } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { LogOut, User, Calendar, Users, FileText, Settings } from 'lucide-react';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    logout();\n    navigate('/login');\n  };\n\n  const getNavLinks = () => {\n    if (!user) return [];\n\n    switch (user.role) {\n      case 'admin':\n        return [\n          { to: '/admin', label: 'Dashboard', icon: Calendar },\n          { to: '/admin/doctors', label: 'Doctors', icon: Users },\n          { to: '/admin/appointments', label: 'Appointments', icon: Calendar },\n          { to: '/admin/patients', label: 'Patients', icon: User },\n          { to: '/admin/prescriptions', label: 'Prescriptions', icon: FileText }\n        ];\n      case 'doctor':\n        return [\n          { to: '/doctor', label: 'Dashboard', icon: Calendar },\n          { to: '/doctor/appointments', label: 'Appointments', icon: Calendar },\n          { to: '/doctor/prescriptions', label: 'Prescriptions', icon: FileText },\n          { to: '/doctor/availability', label: 'Availability', icon: Settings }\n        ];\n      case 'patient':\n        return [\n          { to: '/patient', label: 'Dashboard', icon: Calendar },\n          { to: '/patient/book', label: 'Book Appointment', icon: Calendar },\n          { to: '/patient/appointments', label: 'My Appointments', icon: Calendar },\n          { to: '/patient/prescriptions', label: 'Prescriptions', icon: FileText }\n        ];\n      default:\n        return [];\n    }\n  };\n\n  const navLinks = getNavLinks();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {user && (\n        <nav className=\"bg-white shadow-sm border-b border-gray-200\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between h-16\">\n              <div className=\"flex items-center space-x-8\">\n                <Link to=\"/\" className=\"flex items-center space-x-2\">\n                  <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <span className=\"text-xl font-bold text-gray-900\">MedBook</span>\n                </Link>\n                \n                <div className=\"hidden md:flex space-x-6\">\n                  {navLinks.map((link) => (\n                    <Link\n                      key={link.to}\n                      to={link.to}\n                      className=\"flex items-center space-x-2 text-gray-600 hover:text-blue-600 transition-colors\"\n                    >\n                      <link.icon className=\"w-4 h-4\" />\n                      <span>{link.label}</span>\n                    </Link>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5 text-gray-400\" />\n                  <span className=\"text-sm text-gray-700\">{user.name}</span>\n                  <span className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full capitalize\">\n                    {user.role}\n                  </span>\n                </div>\n                <button\n                  onClick={handleLogout}\n                  className=\"flex items-center space-x-2 text-gray-600 hover:text-red-600 transition-colors\"\n                >\n                  <LogOut className=\"w-4 h-4\" />\n                  <span className=\"hidden sm:inline\">Logout</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </nav>\n      )}\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {children}\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;","size_bytes":4028},"client/src/components/LoadingSpinner.tsx":{"content":"import React from 'react';\nimport { Calendar } from 'lucide-react';\n\nconst LoadingSpinner: React.FC = () => {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4 animate-pulse\">\n          <Calendar className=\"w-8 h-8 text-white\" />\n        </div>\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Loading MedBook</h2>\n        <p className=\"text-gray-600\">Please wait while we set up your session...</p>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;","size_bytes":799},"client/src/components/ProtectedRoute.tsx":{"content":"import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  allowedRoles?: string[];\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children, allowedRoles }) => {\n  const { user } = useAuth();\n\n  if (!user) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  if (allowedRoles && !allowedRoles.includes(user.role)) {\n    // Redirect to appropriate dashboard based on role\n    switch (user.role) {\n      case 'admin':\n        return <Navigate to=\"/admin\" replace />;\n      case 'doctor':\n        return <Navigate to=\"/doctor\" replace />;\n      case 'patient':\n        return <Navigate to=\"/patient\" replace />;\n      default:\n        return <Navigate to=\"/login\" replace />;\n    }\n  }\n\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;","size_bytes":886},"client/src/contexts/AppContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { apiClient } from '../lib/api';\nimport { useAuth } from './AuthContext';\n\ninterface Doctor {\n  id: string;\n  userId: string;\n  name: string;\n  email: string;\n  phone: string;\n  specialization: string;\n  experience: number;\n  availability: any[];\n  leaveDays: string[];\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface Appointment {\n  id: string;\n  patientId: string;\n  doctorId: string;\n  patientName: string;\n  doctorName: string;\n  doctorSpecialization: string;\n  date: string;\n  time: string;\n  status: 'pending' | 'confirmed' | 'rejected' | 'cancelled' | 'completed';\n  reason: string;\n  createdAt: string;\n}\n\ninterface Prescription {\n  id: string;\n  appointmentId: string;\n  patientId: string;\n  doctorId: string;\n  patientName: string;\n  doctorName: string;\n  medications: string;\n  instructions: string;\n  createdAt: string;\n}\n\ninterface AppContextType {\n  doctors: Doctor[];\n  appointments: Appointment[];\n  prescriptions: Prescription[];\n  loading: boolean;\n  addAppointment: (appointment: Omit<Appointment, 'id' | 'createdAt' | 'patientName' | 'doctorName' | 'doctorSpecialization'>) => Promise<boolean>;\n  updateAppointment: (id: string, updates: Partial<Appointment>) => Promise<boolean>;\n  addPrescription: (prescription: Omit<Prescription, 'id' | 'createdAt' | 'patientName' | 'doctorName'>) => Promise<boolean>;\n  updateDoctorAvailability: (doctorId: string, availability: any, leaveDays: string[]) => Promise<boolean>;\n  refreshData: () => Promise<void>;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport const AppProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\n  const [prescriptions, setPrescriptions] = useState<Prescription[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      refreshData();\n    } else {\n      setDoctors([]);\n      setAppointments([]);\n      setPrescriptions([]);\n      setLoading(false);\n    }\n  }, [user]);\n\n  const refreshData = async () => {\n    setLoading(true);\n    try {\n      await Promise.all([\n        fetchDoctors(),\n        fetchAppointments(),\n        fetchPrescriptions()\n      ]);\n    } catch (error) {\n      console.error('Error refreshing data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchDoctors = async () => {\n    try {\n      const data = await apiClient.getDoctors();\n      \n      const doctorsData = data?.map(doc => ({\n        id: doc.id,\n        userId: doc.userId,\n        name: doc.user.name,\n        email: doc.user.email,\n        phone: doc.user.phone,\n        specialization: doc.specialization,\n        experience: doc.experience,\n        availability: doc.availability || [],\n        leaveDays: doc.leaveDays || [],\n        isActive: doc.isActive,\n        createdAt: doc.createdAt\n      })) || [];\n\n      setDoctors(doctorsData);\n    } catch (error) {\n      console.error('Error fetching doctors:', error);\n    }\n  };\n\n  const fetchAppointments = async () => {\n    try {\n      const data = await apiClient.getAppointments();\n      \n      // For now, use simplified appointment data\n      // In a real implementation, we'd need to join with user data\n      const appointmentsData = data?.map(apt => ({\n        id: apt.id,\n        patientId: apt.patientId,\n        doctorId: apt.doctorId,\n        patientName: 'Patient', // TODO: Join with user data\n        doctorName: 'Doctor', // TODO: Join with user data\n        doctorSpecialization: 'General Medicine', // TODO: Join with doctor data\n        date: apt.date,\n        time: apt.time,\n        status: apt.status,\n        reason: apt.reason,\n        createdAt: apt.createdAt\n      })) || [];\n\n      setAppointments(appointmentsData);\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n    }\n  };\n\n  const fetchPrescriptions = async () => {\n    try {\n      const data = await apiClient.getPrescriptions();\n      \n      // For now, use simplified prescription data\n      // In a real implementation, we'd need to join with user data\n      const prescriptionsData = data?.map(presc => ({\n        id: presc.id,\n        appointmentId: presc.appointmentId,\n        patientId: presc.patientId,\n        doctorId: presc.doctorId,\n        patientName: 'Patient', // TODO: Join with user data\n        doctorName: 'Doctor', // TODO: Join with user data\n        medications: presc.medications,\n        instructions: presc.instructions,\n        createdAt: presc.createdAt\n      })) || [];\n\n      setPrescriptions(prescriptionsData);\n    } catch (error) {\n      console.error('Error fetching prescriptions:', error);\n    }\n  };\n\n  const addAppointment = async (appointmentData: Omit<Appointment, 'id' | 'createdAt' | 'patientName' | 'doctorName' | 'doctorSpecialization'>): Promise<boolean> => {\n    try {\n      await apiClient.createAppointment({\n        patientId: appointmentData.patientId,\n        doctorId: appointmentData.doctorId,\n        date: appointmentData.date,\n        time: appointmentData.time,\n        status: appointmentData.status,\n        reason: appointmentData.reason\n      });\n\n      await fetchAppointments();\n      return true;\n    } catch (error) {\n      console.error('Error adding appointment:', error);\n      return false;\n    }\n  };\n\n  const updateAppointment = async (id: string, updates: Partial<Appointment>): Promise<boolean> => {\n    try {\n      const updateData: any = {};\n      if (updates.status) updateData.status = updates.status;\n      if (updates.date) updateData.date = updates.date;\n      if (updates.time) updateData.time = updates.time;\n      if (updates.reason) updateData.reason = updates.reason;\n\n      await apiClient.updateAppointment(id, updateData);\n\n      await fetchAppointments();\n      return true;\n    } catch (error) {\n      console.error('Error updating appointment:', error);\n      return false;\n    }\n  };\n\n  const addPrescription = async (prescriptionData: Omit<Prescription, 'id' | 'createdAt' | 'patientName' | 'doctorName'>): Promise<boolean> => {\n    try {\n      await apiClient.createPrescription({\n        appointmentId: prescriptionData.appointmentId,\n        patientId: prescriptionData.patientId,\n        doctorId: prescriptionData.doctorId,\n        medications: prescriptionData.medications,\n        instructions: prescriptionData.instructions\n      });\n\n      await fetchPrescriptions();\n      return true;\n    } catch (error) {\n      console.error('Error adding prescription:', error);\n      return false;\n    }\n  };\n\n  const updateDoctorAvailability = async (doctorId: string, availability: any, leaveDays: string[]): Promise<boolean> => {\n    try {\n      await apiClient.updateDoctorAvailability(doctorId, {\n        availability,\n        leaveDays\n      });\n\n      await fetchDoctors();\n      return true;\n    } catch (error) {\n      console.error('Error updating doctor availability:', error);\n      return false;\n    }\n  };\n\n  return (\n    <AppContext.Provider value={{\n      doctors,\n      appointments,\n      prescriptions,\n      loading,\n      addAppointment,\n      updateAppointment,\n      addPrescription,\n      updateDoctorAvailability,\n      refreshData\n    }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};","size_bytes":7619},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { apiClient } from '../lib/api';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  phone: string;\n  role: 'admin' | 'doctor' | 'patient';\n  createdAt: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string, expectedRole?: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  register: (userData: any) => Promise<boolean>;\n  forgotPassword: (email: string) => Promise<boolean>;\n  resetPassword: (token: string, newPassword: string) => Promise<boolean>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for stored user session\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string, expectedRole?: string): Promise<boolean> => {\n    try {\n      const response = await apiClient.login(email, password);\n      \n      if (response.success && response.data) {\n        const userData = {\n          id: response.data.id,\n          email: response.data.email,\n          name: response.data.name,\n          phone: response.data.phone,\n          role: response.data.role,\n          createdAt: response.data.createdAt || new Date().toISOString()\n        };\n        \n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setUser(null);\n      localStorage.removeItem('user');\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const register = async (userData: any): Promise<boolean> => {\n    try {\n      const response = await apiClient.register(userData);\n      \n      if (response.success && response.data) {\n        // Auto-login after successful registration\n        const userDataForStorage = {\n          id: response.data.id,\n          email: response.data.email,\n          name: response.data.name,\n          phone: response.data.phone,\n          role: response.data.role,\n          createdAt: response.data.createdAt || new Date().toISOString()\n        };\n        \n        setUser(userDataForStorage);\n        localStorage.setItem('user', JSON.stringify(userDataForStorage));\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    }\n  };\n\n  const forgotPassword = async (email: string): Promise<boolean> => {\n    try {\n      // For now, just return true since we're using a simple demo auth system\n      // In a real app, this would send a password reset email\n      console.log('Password reset requested for:', email);\n      return true;\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      return false;\n    }\n  };\n\n  const resetPassword = async (token: string, newPassword: string): Promise<boolean> => {\n    try {\n      // For now, just return true since we're using a simple demo auth system\n      // In a real app, this would verify the token and update the password\n      console.log('Password reset for token:', token);\n      return true;\n    } catch (error) {\n      console.error('Reset password error:', error);\n      return false;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      loading,\n      login,\n      logout,\n      register,\n      forgotPassword,\n      resetPassword\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","size_bytes":4302},"client/src/lib/api.ts":{"content":"// API client to replace Supabase calls\nconst API_BASE = '/api';\n\ninterface ApiResponse<T> {\n  data?: T;\n  error?: string;\n  success?: boolean;\n}\n\nexport class ApiClient {\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const response = await fetch(`${API_BASE}${endpoint}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ message: 'Network error' }));\n      throw new Error(errorData.message || `HTTP ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  // Auth methods\n  async login(email: string, password: string) {\n    return this.request<ApiResponse<any>>('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    });\n  }\n\n  async register(userData: any) {\n    return this.request<ApiResponse<any>>('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  // User methods\n  async getUser(id: string) {\n    return this.request<any>(`/users/${id}`);\n  }\n\n  // Doctor methods\n  async getDoctors() {\n    return this.request<any[]>('/doctors');\n  }\n\n  async getDoctor(userId: string) {\n    return this.request<any>(`/doctors/${userId}`);\n  }\n\n  async createDoctor(doctorData: any) {\n    return this.request<any>('/doctors', {\n      method: 'POST',\n      body: JSON.stringify(doctorData),\n    });\n  }\n\n  async updateDoctor(userId: string, updates: any) {\n    return this.request<any>(`/doctors/${userId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n  }\n\n  // Patient methods\n  async getPatients() {\n    return this.request<any[]>('/patients');\n  }\n\n  async createPatient(patientData: any) {\n    return this.request<any>('/patients', {\n      method: 'POST',\n      body: JSON.stringify(patientData),\n    });\n  }\n\n  // Appointment methods\n  async getAppointments(filters: { patientId?: string; doctorId?: string } = {}) {\n    const params = new URLSearchParams();\n    if (filters.patientId) params.append('patientId', filters.patientId);\n    if (filters.doctorId) params.append('doctorId', filters.doctorId);\n    \n    const query = params.toString();\n    return this.request<any[]>(`/appointments${query ? `?${query}` : ''}`);\n  }\n\n  async createAppointment(appointmentData: any) {\n    return this.request<any>('/appointments', {\n      method: 'POST',\n      body: JSON.stringify(appointmentData),\n    });\n  }\n\n  async updateAppointment(id: string, updates: any) {\n    return this.request<any>(`/appointments/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n  }\n\n  // Prescription methods\n  async getPrescriptions(filters: { patientId?: string; doctorId?: string } = {}) {\n    const params = new URLSearchParams();\n    if (filters.patientId) params.append('patientId', filters.patientId);\n    if (filters.doctorId) params.append('doctorId', filters.doctorId);\n    \n    const query = params.toString();\n    return this.request<any[]>(`/prescriptions${query ? `?${query}` : ''}`);\n  }\n\n  async createPrescription(prescriptionData: any) {\n    return this.request<any>('/prescriptions', {\n      method: 'POST',\n      body: JSON.stringify(prescriptionData),\n    });\n  }\n\n  async updatePrescription(id: string, updates: any) {\n    return this.request<any>(`/prescriptions/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n  }\n\n  // Admin methods\n  async createDoctorAccount(doctorData: any) {\n    return this.request<ApiResponse<any>>('/admin/doctors', {\n      method: 'POST',\n      body: JSON.stringify(doctorData),\n    });\n  }\n}\n\nexport const apiClient = new ApiClient();","size_bytes":3730},"client/src/pages/AdminDashboard.tsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useApp } from '../contexts/AppContext';\nimport { Users, Calendar, FileText, Stethoscope, TrendingUp, Clock } from 'lucide-react';\nimport { format } from 'date-fns';\n\nconst AdminDashboard: React.FC = () => {\n  const { doctors, appointments, prescriptions } = useApp();\n  \n  const activeApps = appointments.filter(app => app.status !== 'cancelled');\n  const pendingApps = appointments.filter(app => app.status === 'pending');\n  const todayApps = appointments.filter(app => \n    format(new Date(app.date), 'yyyy-MM-dd') === format(new Date(), 'yyyy-MM-dd')\n  );\n\n  const activeDoctors = doctors.filter(doc => doc.isActive);\n  const totalPatients = new Set(appointments.map(app => app.patientId)).size;\n\n  // Recent activity\n  const recentAppointments = appointments\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 5);\n\n  const recentPrescriptions = prescriptions\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 3);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'cancelled': return 'bg-gray-100 text-gray-800';\n      case 'completed': return 'bg-blue-100 text-blue-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n        <p className=\"text-gray-600 mt-1\">System overview and management</p>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Doctors</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{activeDoctors.length}</p>\n              <p className=\"text-sm text-gray-500\">of {doctors.length} total</p>\n            </div>\n            <Stethoscope className=\"w-8 h-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Patients</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{totalPatients}</p>\n              <p className=\"text-sm text-gray-500\">registered users</p>\n            </div>\n            <Users className=\"w-8 h-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Appointments</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{activeApps.length}</p>\n              <p className=\"text-sm text-gray-500\">{pendingApps.length} pending</p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-purple-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Prescriptions</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{prescriptions.length}</p>\n              <p className=\"text-sm text-gray-500\">total issued</p>\n            </div>\n            <FileText className=\"w-8 h-8 text-teal-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Today's Activity */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Today's Activity</h2>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Calendar className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <p className=\"text-2xl font-bold text-gray-900\">{todayApps.length}</p>\n              <p className=\"text-gray-600\">Appointments Today</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Clock className=\"w-8 h-8 text-yellow-600\" />\n              </div>\n              <p className=\"text-2xl font-bold text-gray-900\">{pendingApps.length}</p>\n              <p className=\"text-gray-600\">Pending Requests</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <TrendingUp className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {Math.round((activeApps.length / Math.max(doctors.length, 1)) * 10) / 10}\n              </p>\n              <p className=\"text-gray-600\">Avg. Appointments/Doctor</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Recent Appointments */}\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Recent Appointments</h2>\n              <Link\n                to=\"/admin/appointments\"\n                className=\"text-blue-600 hover:text-blue-500 text-sm font-medium\"\n              >\n                View All\n              </Link>\n            </div>\n          </div>\n          <div className=\"p-6\">\n            {recentAppointments.length > 0 ? (\n              <div className=\"space-y-4\">\n                {recentAppointments.map((appointment) => (\n                  <div\n                    key={appointment.id}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-900\">{appointment.patientName}</h3>\n                      <p className=\"text-sm text-gray-600\">with {appointment.doctorName}</p>\n                      <p className=\"text-sm text-gray-500\">\n                        {format(new Date(appointment.date), 'MMM dd')} at {appointment.time}\n                      </p>\n                    </div>\n                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}`}>\n                      {appointment.status}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No recent appointments</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Recent Prescriptions */}\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Recent Prescriptions</h2>\n              <Link\n                to=\"/admin/prescriptions\"\n                className=\"text-blue-600 hover:text-blue-500 text-sm font-medium\"\n              >\n                View All\n              </Link>\n            </div>\n          </div>\n          <div className=\"p-6\">\n            {recentPrescriptions.length > 0 ? (\n              <div className=\"space-y-4\">\n                {recentPrescriptions.map((prescription) => (\n                  <div\n                    key={prescription.id}\n                    className=\"flex items-start justify-between p-4 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-900\">{prescription.patientName}</h3>\n                      <p className=\"text-sm text-gray-600\">by {prescription.doctorName}</p>\n                      <p className=\"text-sm text-gray-500\">\n                        {format(new Date(prescription.createdAt), 'MMM dd, yyyy')}\n                      </p>\n                    </div>\n                    <FileText className=\"w-5 h-5 text-gray-400\" />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No recent prescriptions</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Quick Actions</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Link\n            to=\"/admin/doctors\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <Stethoscope className=\"w-6 h-6 text-blue-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">Manage Doctors</h3>\n              <p className=\"text-sm text-gray-600\">Add, edit, or view doctors</p>\n            </div>\n          </Link>\n\n          <Link\n            to=\"/admin/appointments\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <Calendar className=\"w-6 h-6 text-purple-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">View Appointments</h3>\n              <p className=\"text-sm text-gray-600\">System-wide appointments</p>\n            </div>\n          </Link>\n\n          <Link\n            to=\"/admin/patients\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <Users className=\"w-6 h-6 text-green-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">Patient Records</h3>\n              <p className=\"text-sm text-gray-600\">View patient information</p>\n            </div>\n          </Link>\n\n          <Link\n            to=\"/admin/prescriptions\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <FileText className=\"w-6 h-6 text-teal-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">Prescriptions</h3>\n              <p className=\"text-sm text-gray-600\">View all prescriptions</p>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;","size_bytes":11621},"client/src/pages/BookAppointment.tsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useApp } from '../contexts/AppContext';\nimport { Search, Filter, Calendar, Clock, User, Stethoscope } from 'lucide-react';\nimport { format, addDays, isWeekend } from 'date-fns';\n\nconst BookAppointment: React.FC = () => {\n  const { user } = useAuth();\n  const { doctors, addAppointment } = useApp();\n  const navigate = useNavigate();\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSpecialization, setSelectedSpecialization] = useState('');\n  const [selectedDoctor, setSelectedDoctor] = useState<any>(null);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedTime, setSelectedTime] = useState('');\n  const [reason, setReason] = useState('');\n  const [showBookingForm, setShowBookingForm] = useState(false);\n\n  const specializations = Array.from(new Set(doctors.map(doc => doc.specialization)));\n\n  const filteredDoctors = doctors.filter(doctor => {\n    const matchesSearch = doctor.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         doctor.specialization.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSpecialization = !selectedSpecialization || doctor.specialization === selectedSpecialization;\n    return matchesSearch && matchesSpecialization && doctor.isActive;\n  });\n\n  const getAvailableDates = (doctor: any) => {\n    const dates = [];\n    const today = new Date();\n    \n    for (let i = 1; i <= 14; i++) {\n      const date = addDays(today, i);\n      const dayName = format(date, 'EEEE');\n      const dateString = format(date, 'yyyy-MM-dd');\n      \n      // Check if doctor is available on this day and not on leave\n      const isAvailable = doctor.availability.some((slot: any) => slot.day === dayName);\n      const isOnLeave = doctor.leaveDays.includes(dateString);\n      \n      if (isAvailable && !isOnLeave && !isWeekend(date)) {\n        dates.push(dateString);\n      }\n    }\n    \n    return dates;\n  };\n\n  const getAvailableTimes = (doctor: any, date: string) => {\n    const dayName = format(new Date(date), 'EEEE');\n    const daySlot = doctor.availability.find((slot: any) => slot.day === dayName);\n    \n    if (!daySlot) return [];\n    \n    const times = [];\n    const start = parseInt(daySlot.startTime.split(':')[0]);\n    const end = parseInt(daySlot.endTime.split(':')[0]);\n    \n    for (let hour = start; hour < end; hour++) {\n      times.push(`${hour.toString().padStart(2, '0')}:00`);\n      if (hour + 1 < end) {\n        times.push(`${hour.toString().padStart(2, '0')}:30`);\n      }\n    }\n    \n    return times;\n  };\n\n  const handleBookAppointment = (doctor: any) => {\n    setSelectedDoctor(doctor);\n    setShowBookingForm(true);\n    setSelectedDate('');\n    setSelectedTime('');\n    setReason('');\n  };\n\n  const handleSubmitBooking = () => {\n    if (!selectedDoctor || !selectedDate || !selectedTime || !reason.trim()) {\n      alert('Please fill in all fields');\n      return;\n    }\n\n    addAppointment({\n      patientId: user!.id,\n      doctorId: selectedDoctor.id,\n      date: selectedDate,\n      time: selectedTime,\n      status: 'pending' as const,\n      reason: reason\n    }).then(success => {\n      if (success) {\n        navigate('/patient/appointments');\n      } else {\n        alert('Failed to book appointment. Please try again.');\n      }\n    });\n  };\n\n  if (showBookingForm) {\n    const availableDates = getAvailableDates(selectedDoctor);\n    const availableTimes = selectedDate ? getAvailableTimes(selectedDoctor, selectedDate) : [];\n\n    return (\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-6\">\n          <button\n            onClick={() => setShowBookingForm(false)}\n            className=\"text-blue-600 hover:text-blue-500 mb-4\"\n          >\n            ← Back to Doctors\n          </button>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Book Appointment</h1>\n          <p className=\"text-gray-600 mt-1\">Schedule with {selectedDoctor.name}</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n          <div className=\"flex items-center space-x-4 mb-6 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Stethoscope className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">{selectedDoctor.name}</h2>\n              <p className=\"text-gray-600\">{selectedDoctor.specialization}</p>\n              <p className=\"text-sm text-gray-500\">{selectedDoctor.experience} years experience</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Select Date\n              </label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                {availableDates.map(date => (\n                  <button\n                    key={date}\n                    onClick={() => setSelectedDate(date)}\n                    className={`p-3 rounded-lg border text-sm font-medium transition-colors ${\n                      selectedDate === date\n                        ? 'bg-blue-600 text-white border-blue-600'\n                        : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n                    }`}\n                  >\n                    {format(new Date(date), 'MMM dd')}\n                    <br />\n                    <span className=\"text-xs opacity-75\">\n                      {format(new Date(date), 'EEEE')}\n                    </span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {selectedDate && (\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Select Time\n                </label>\n                <div className=\"grid grid-cols-3 md:grid-cols-4 gap-3\">\n                  {availableTimes.map(time => (\n                    <button\n                      key={time}\n                      onClick={() => setSelectedTime(time)}\n                      className={`p-3 rounded-lg border text-sm font-medium transition-colors ${\n                        selectedTime === time\n                          ? 'bg-blue-600 text-white border-blue-600'\n                          : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n                      }`}\n                    >\n                      {time}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <div>\n              <label htmlFor=\"reason\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Reason for Visit\n              </label>\n              <textarea\n                id=\"reason\"\n                value={reason}\n                onChange={(e) => setReason(e.target.value)}\n                rows={4}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Please describe the reason for your appointment...\"\n              />\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <button\n                onClick={() => setShowBookingForm(false)}\n                className=\"flex-1 bg-gray-200 text-gray-800 py-3 px-4 rounded-lg font-medium hover:bg-gray-300 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSubmitBooking}\n                className=\"flex-1 bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n              >\n                Book Appointment\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Book Appointment</h1>\n        <p className=\"text-gray-600 mt-1\">Find and book with available doctors</p>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center space-y-4 md:space-y-0 md:space-x-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search doctors by name or specialization...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n          <div className=\"md:w-64\">\n            <div className=\"relative\">\n              <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <select\n                value={selectedSpecialization}\n                onChange={(e) => setSelectedSpecialization(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none\"\n              >\n                <option value=\"\">All Specializations</option>\n                {specializations.map(spec => (\n                  <option key={spec} value={spec}>{spec}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Doctors List */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredDoctors.map((doctor) => (\n          <div key={doctor.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n                <Stethoscope className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">{doctor.name}</h3>\n                <p className=\"text-gray-600\">{doctor.specialization}</p>\n                <p className=\"text-sm text-gray-500\">{doctor.experience} years experience</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-2 mb-4\">\n              <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                <Calendar className=\"w-4 h-4\" />\n                <span>Available days: {doctor.availability.map((slot: any) => slot.day).join(', ')}</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                <Clock className=\"w-4 h-4\" />\n                <span>\n                  {doctor.availability.length > 0 && `${doctor.availability[0].startTime} - ${doctor.availability[0].endTime}`}\n                </span>\n              </div>\n            </div>\n\n            <button\n              onClick={() => handleBookAppointment(doctor)}\n              className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n            >\n              Book Appointment\n            </button>\n          </div>\n        ))}\n      </div>\n\n      {filteredDoctors.length === 0 && (\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n          <User className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No doctors found</h3>\n          <p className=\"text-gray-600\">Try adjusting your search criteria or filters</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BookAppointment;","size_bytes":12060},"client/src/pages/DoctorAppointments.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useApp } from '../contexts/AppContext';\nimport { Calendar, Clock, User, CheckCircle, XCircle, Filter, MessageCircle } from 'lucide-react';\nimport { format, isToday, isTomorrow } from 'date-fns';\n\nconst DoctorAppointments: React.FC = () => {\n  const { user } = useAuth();\n  const { appointments, updateAppointment } = useApp();\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  const doctorAppointments = appointments.filter(app => app.doctorId === user?.id);\n  \n  const filteredAppointments = statusFilter === 'all' \n    ? doctorAppointments \n    : doctorAppointments.filter(app => app.status === statusFilter);\n\n  const sortedAppointments = filteredAppointments.sort((a, b) => {\n    const dateCompare = new Date(a.date).getTime() - new Date(b.date).getTime();\n    if (dateCompare === 0) {\n      return a.time.localeCompare(b.time);\n    }\n    return dateCompare;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'cancelled': return 'bg-gray-100 text-gray-800';\n      case 'completed': return 'bg-blue-100 text-blue-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getDateLabel = (date: string) => {\n    const appointmentDate = new Date(date);\n    if (isToday(appointmentDate)) return 'Today';\n    if (isTomorrow(appointmentDate)) return 'Tomorrow';\n    return format(appointmentDate, 'MMM dd, yyyy');\n  };\n\n  const handleConfirmAppointment = (appointmentId: string) => {\n    updateAppointment(appointmentId, { status: 'confirmed' }).then(success => {\n      if (!success) {\n        alert('Failed to confirm appointment. Please try again.');\n      }\n    });\n  };\n\n  const handleRejectAppointment = (appointmentId: string) => {\n    if (confirm('Are you sure you want to reject this appointment?')) {\n      updateAppointment(appointmentId, { status: 'rejected' }).then(success => {\n        if (!success) {\n          alert('Failed to reject appointment. Please try again.');\n        }\n      });\n    }\n  };\n\n  const handleCompleteAppointment = (appointmentId: string) => {\n    updateAppointment(appointmentId, { status: 'completed' }).then(success => {\n      if (!success) {\n        alert('Failed to complete appointment. Please try again.');\n      }\n    });\n  };\n\n  const statusCounts = {\n    all: doctorAppointments.length,\n    pending: doctorAppointments.filter(app => app.status === 'pending').length,\n    confirmed: doctorAppointments.filter(app => app.status === 'confirmed').length,\n    completed: doctorAppointments.filter(app => app.status === 'completed').length,\n    cancelled: doctorAppointments.filter(app => app.status === 'cancelled').length,\n    rejected: doctorAppointments.filter(app => app.status === 'rejected').length\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">My Appointments</h1>\n        <p className=\"text-gray-600 mt-1\">Manage patient appointments and requests</p>\n      </div>\n\n      {/* Status Filter */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Filter className=\"w-5 h-5 text-gray-400\" />\n          <span className=\"font-medium text-gray-700\">Filter by status:</span>\n        </div>\n        <div className=\"flex flex-wrap gap-2\">\n          {[\n            { key: 'all', label: 'All', count: statusCounts.all },\n            { key: 'pending', label: 'Pending', count: statusCounts.pending },\n            { key: 'confirmed', label: 'Confirmed', count: statusCounts.confirmed },\n            { key: 'completed', label: 'Completed', count: statusCounts.completed },\n            { key: 'cancelled', label: 'Cancelled', count: statusCounts.cancelled },\n            { key: 'rejected', label: 'Rejected', count: statusCounts.rejected }\n          ].map(filter => (\n            <button\n              key={filter.key}\n              onClick={() => setStatusFilter(filter.key)}\n              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                statusFilter === filter.key\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              {filter.label} ({filter.count})\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Appointments List */}\n      <div className=\"space-y-4\">\n        {sortedAppointments.length > 0 ? (\n          sortedAppointments.map((appointment) => (\n            <div key={appointment.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <User className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900\">{appointment.patientName}</h3>\n                      <p className=\"text-gray-600\">Patient</p>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                    <div className=\"flex items-center space-x-2 text-gray-600\">\n                      <Calendar className=\"w-4 h-4\" />\n                      <span>{getDateLabel(appointment.date)}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-gray-600\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span>{appointment.time}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm text-gray-600 mb-1\">Reason for visit:</p>\n                    <p className=\"text-gray-900\">{appointment.reason}</p>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(appointment.status)}`}>\n                      {appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}\n                    </span>\n\n                    <div className=\"flex items-center space-x-2\">\n                      {appointment.status === 'pending' && (\n                        <>\n                          <button\n                            onClick={() => handleConfirmAppointment(appointment.id)}\n                            className=\"flex items-center space-x-1 bg-green-100 text-green-700 px-3 py-2 rounded-lg hover:bg-green-200 transition-colors\"\n                          >\n                            <CheckCircle className=\"w-4 h-4\" />\n                            <span>Confirm</span>\n                          </button>\n                          <button\n                            onClick={() => handleRejectAppointment(appointment.id)}\n                            className=\"flex items-center space-x-1 bg-red-100 text-red-700 px-3 py-2 rounded-lg hover:bg-red-200 transition-colors\"\n                          >\n                            <XCircle className=\"w-4 h-4\" />\n                            <span>Reject</span>\n                          </button>\n                        </>\n                      )}\n                      \n                      {appointment.status === 'confirmed' && new Date(appointment.date) <= new Date() && (\n                        <button\n                          onClick={() => handleCompleteAppointment(appointment.id)}\n                          className=\"flex items-center space-x-1 bg-blue-100 text-blue-700 px-3 py-2 rounded-lg hover:bg-blue-200 transition-colors\"\n                        >\n                          <CheckCircle className=\"w-4 h-4\" />\n                          <span>Complete</span>\n                        </button>\n                      )}\n\n                      {appointment.status === 'completed' && (\n                        <button\n                          onClick={() => window.location.href = `/doctor/prescriptions?appointment=${appointment.id}`}\n                          className=\"flex items-center space-x-1 bg-purple-100 text-purple-700 px-3 py-2 rounded-lg hover:bg-purple-200 transition-colors\"\n                        >\n                          <MessageCircle className=\"w-4 h-4\" />\n                          <span>Add Prescription</span>\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Additional Info Based on Status */}\n              {appointment.status === 'pending' && (\n                <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <p className=\"text-sm text-yellow-700\">\n                    This appointment is waiting for your confirmation. Please review and respond.\n                  </p>\n                </div>\n              )}\n\n              {appointment.status === 'confirmed' && isToday(new Date(appointment.date)) && (\n                <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <p className=\"text-sm text-blue-700\">\n                    This appointment is scheduled for today. The patient has been notified.\n                  </p>\n                </div>\n              )}\n\n              {appointment.status === 'completed' && (\n                <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <p className=\"text-sm text-green-700\">\n                    Appointment completed. You can now add a prescription if needed.\n                  </p>\n                </div>\n              )}\n            </div>\n          ))\n        ) : (\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n            <Calendar className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {statusFilter === 'all' ? 'No appointments yet' : `No ${statusFilter} appointments`}\n            </h3>\n            <p className=\"text-gray-600\">\n              {statusFilter === 'all' \n                ? 'Your appointments will appear here when patients book with you'\n                : `You don't have any ${statusFilter} appointments`\n              }\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DoctorAppointments;","size_bytes":10903},"client/src/pages/DoctorDashboard.tsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useApp } from '../contexts/AppContext';\nimport { Calendar, Clock, User, FileText, CheckCircle, XCircle } from 'lucide-react';\nimport { format, isToday, isTomorrow } from 'date-fns';\n\nconst DoctorDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const { appointments, prescriptions } = useApp();\n  \n  const doctorAppointments = appointments.filter(app => app.doctorId === user?.id);\n  \n  const pendingAppointments = doctorAppointments.filter(app => app.status === 'pending');\n  const todayAppointments = doctorAppointments.filter(app => \n    isToday(new Date(app.date)) && app.status === 'confirmed'\n  );\n  const tomorrowAppointments = doctorAppointments.filter(app => \n    isTomorrow(new Date(app.date)) && app.status === 'confirmed'\n  );\n  \n  const doctorPrescriptions = prescriptions.filter(presc => presc.doctorId === user?.id);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'cancelled': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getDateLabel = (date: string) => {\n    const appointmentDate = new Date(date);\n    if (isToday(appointmentDate)) return 'Today';\n    if (isTomorrow(appointmentDate)) return 'Tomorrow';\n    return format(appointmentDate, 'MMM dd');\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Welcome, {user?.name}</h1>\n          <p className=\"text-gray-600 mt-1\">Manage your appointments and patient care</p>\n        </div>\n        <Link\n          to=\"/doctor/appointments\"\n          className=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n        >\n          <Calendar className=\"w-5 h-5\" />\n          <span>View All Appointments</span>\n        </Link>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Pending Requests</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{pendingAppointments.length}</p>\n            </div>\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Today's Appointments</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{todayAppointments.length}</p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Appointments</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{doctorAppointments.length}</p>\n            </div>\n            <User className=\"w-8 h-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Prescriptions</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{doctorPrescriptions.length}</p>\n            </div>\n            <FileText className=\"w-8 h-8 text-purple-600\" />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Pending Appointment Requests */}\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Pending Requests</h2>\n              <Link\n                to=\"/doctor/appointments\"\n                className=\"text-blue-600 hover:text-blue-500 text-sm font-medium\"\n              >\n                View All\n              </Link>\n            </div>\n          </div>\n          <div className=\"p-6\">\n            {pendingAppointments.length > 0 ? (\n              <div className=\"space-y-4\">\n                {pendingAppointments.slice(0, 5).map((appointment) => (\n                  <div\n                    key={appointment.id}\n                    className=\"flex items-center justify-between p-4 bg-yellow-50 rounded-lg border border-yellow-200\"\n                  >\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-900\">{appointment.patientName}</h3>\n                      <p className=\"text-sm text-gray-600\">{appointment.reason}</p>\n                      <p className=\"text-sm text-gray-500\">\n                        {getDateLabel(appointment.date)} at {appointment.time}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <button className=\"p-2 text-green-600 hover:bg-green-100 rounded-lg transition-colors\">\n                        <CheckCircle className=\"w-5 h-5\" />\n                      </button>\n                      <button className=\"p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors\">\n                        <XCircle className=\"w-5 h-5\" />\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No pending appointment requests</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Today's Schedule */}\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Today's Schedule</h2>\n              <Link\n                to=\"/doctor/appointments\"\n                className=\"text-blue-600 hover:text-blue-500 text-sm font-medium\"\n              >\n                View All\n              </Link>\n            </div>\n          </div>\n          <div className=\"p-6\">\n            {todayAppointments.length > 0 ? (\n              <div className=\"space-y-4\">\n                {todayAppointments\n                  .sort((a, b) => a.time.localeCompare(b.time))\n                  .map((appointment) => (\n                  <div\n                    key={appointment.id}\n                    className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg border border-blue-200\"\n                  >\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-900\">{appointment.patientName}</h3>\n                      <p className=\"text-sm text-gray-600\">{appointment.reason}</p>\n                      <p className=\"text-sm text-blue-600 font-medium\">{appointment.time}</p>\n                    </div>\n                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}`}>\n                      {appointment.status}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No appointments scheduled for today</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Tomorrow's Preview */}\n      {tomorrowAppointments.length > 0 && (\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Tomorrow's Schedule Preview</h2>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {tomorrowAppointments\n                .sort((a, b) => a.time.localeCompare(b.time))\n                .map((appointment) => (\n                <div\n                  key={appointment.id}\n                  className=\"p-4 bg-green-50 rounded-lg border border-green-200\"\n                >\n                  <h3 className=\"font-medium text-gray-900\">{appointment.patientName}</h3>\n                  <p className=\"text-sm text-gray-600 mt-1\">{appointment.reason}</p>\n                  <p className=\"text-sm text-green-600 font-medium mt-2\">{appointment.time}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Quick Actions</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Link\n            to=\"/doctor/appointments\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <Calendar className=\"w-6 h-6 text-blue-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">Manage Appointments</h3>\n              <p className=\"text-sm text-gray-600\">Review and respond to requests</p>\n            </div>\n          </Link>\n\n          <Link\n            to=\"/doctor/prescriptions\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <FileText className=\"w-6 h-6 text-purple-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">Prescriptions</h3>\n              <p className=\"text-sm text-gray-600\">Create and manage prescriptions</p>\n            </div>\n          </Link>\n\n          <Link\n            to=\"/doctor/availability\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <Clock className=\"w-6 h-6 text-green-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">Set Availability</h3>\n              <p className=\"text-sm text-gray-600\">Update schedule and leave days</p>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DoctorDashboard;","size_bytes":11227},"client/src/pages/PatientAppointments.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useApp } from '../contexts/AppContext';\nimport { Calendar, Clock, User, MapPin, Edit, Trash2, Filter } from 'lucide-react';\nimport { format } from 'date-fns';\n\nconst PatientAppointments: React.FC = () => {\n  const { user } = useAuth();\n  const { appointments, updateAppointment } = useApp();\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  const userAppointments = appointments.filter(app => app.patientId === user?.id);\n  \n  const filteredAppointments = statusFilter === 'all' \n    ? userAppointments \n    : userAppointments.filter(app => app.status === statusFilter);\n\n  const sortedAppointments = filteredAppointments.sort((a, b) => \n    new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'cancelled': return 'bg-gray-100 text-gray-800';\n      case 'completed': return 'bg-blue-100 text-blue-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'confirmed': return '✓';\n      case 'pending': return '⏳';\n      case 'rejected': return '✗';\n      case 'cancelled': return '⊘';\n      case 'completed': return '✓';\n      default: return '?';\n    }\n  };\n\n  const canCancelAppointment = (appointment: any) => {\n    return appointment.status === 'pending' || appointment.status === 'confirmed';\n  };\n\n  const handleCancelAppointment = (appointmentId: string) => {\n    if (confirm('Are you sure you want to cancel this appointment?')) {\n      updateAppointment(appointmentId, { status: 'cancelled' }).then(success => {\n        if (!success) {\n          alert('Failed to cancel appointment. Please try again.');\n        }\n      });\n    }\n  };\n\n  const statusCounts = {\n    all: userAppointments.length,\n    pending: userAppointments.filter(app => app.status === 'pending').length,\n    confirmed: userAppointments.filter(app => app.status === 'confirmed').length,\n    completed: userAppointments.filter(app => app.status === 'completed').length,\n    cancelled: userAppointments.filter(app => app.status === 'cancelled').length,\n    rejected: userAppointments.filter(app => app.status === 'rejected').length\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">My Appointments</h1>\n        <p className=\"text-gray-600 mt-1\">View and manage your appointments</p>\n      </div>\n\n      {/* Status Filter */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Filter className=\"w-5 h-5 text-gray-400\" />\n          <span className=\"font-medium text-gray-700\">Filter by status:</span>\n        </div>\n        <div className=\"flex flex-wrap gap-2\">\n          {[\n            { key: 'all', label: 'All', count: statusCounts.all },\n            { key: 'pending', label: 'Pending', count: statusCounts.pending },\n            { key: 'confirmed', label: 'Confirmed', count: statusCounts.confirmed },\n            { key: 'completed', label: 'Completed', count: statusCounts.completed },\n            { key: 'cancelled', label: 'Cancelled', count: statusCounts.cancelled },\n            { key: 'rejected', label: 'Rejected', count: statusCounts.rejected }\n          ].map(filter => (\n            <button\n              key={filter.key}\n              onClick={() => setStatusFilter(filter.key)}\n              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                statusFilter === filter.key\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              {filter.label} ({filter.count})\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Appointments List */}\n      <div className=\"space-y-4\">\n        {sortedAppointments.length > 0 ? (\n          sortedAppointments.map((appointment) => (\n            <div key={appointment.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <User className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900\">{appointment.doctorName}</h3>\n                      <p className=\"text-gray-600\">{appointment.doctorSpecialization}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                    <div className=\"flex items-center space-x-2 text-gray-600\">\n                      <Calendar className=\"w-4 h-4\" />\n                      <span>{format(new Date(appointment.date), 'MMMM dd, yyyy')}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-gray-600\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span>{appointment.time}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm text-gray-600 mb-1\">Reason for visit:</p>\n                    <p className=\"text-gray-900\">{appointment.reason}</p>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(appointment.status)}`}>\n                      <span className=\"mr-1\">{getStatusIcon(appointment.status)}</span>\n                      {appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}\n                    </span>\n\n                    <div className=\"flex items-center space-x-2\">\n                      {appointment.status === 'pending' && (\n                        <button className=\"flex items-center space-x-1 text-blue-600 hover:text-blue-500 text-sm\">\n                          <Edit className=\"w-4 h-4\" />\n                          <span>Reschedule</span>\n                        </button>\n                      )}\n                      \n                      {canCancelAppointment(appointment) && (\n                        <button\n                          onClick={() => handleCancelAppointment(appointment.id)}\n                          className=\"flex items-center space-x-1 text-red-600 hover:text-red-500 text-sm\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                          <span>Cancel</span>\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {appointment.status === 'rejected' && (\n                <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                  <p className=\"text-sm text-red-700\">\n                    This appointment was rejected. Please contact the doctor's office for more information or book a new appointment.\n                  </p>\n                </div>\n              )}\n\n              {appointment.status === 'confirmed' && new Date(appointment.date) > new Date() && (\n                <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <p className=\"text-sm text-green-700\">\n                    Your appointment is confirmed. Please arrive 15 minutes early and bring your ID and insurance card.\n                  </p>\n                </div>\n              )}\n            </div>\n          ))\n        ) : (\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n            <Calendar className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {statusFilter === 'all' ? 'No appointments yet' : `No ${statusFilter} appointments`}\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              {statusFilter === 'all' \n                ? 'Start by booking your first appointment with a doctor'\n                : `You don't have any ${statusFilter} appointments`\n              }\n            </p>\n            {statusFilter === 'all' && (\n              <button\n                onClick={() => window.location.href = '/patient/book'}\n                className=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n              >\n                Book Appointment\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PatientAppointments;","size_bytes":9166},"client/src/pages/PatientDashboard.tsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useApp } from '../contexts/AppContext';\nimport { Calendar, Clock, User, FileText, Plus, Bell } from 'lucide-react';\nimport { format } from 'date-fns';\n\nconst PatientDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const { appointments, prescriptions } = useApp();\n  \n  const userAppointments = appointments.filter(app => app.patientId === user?.id);\n  const upcomingAppointments = userAppointments\n    .filter(app => new Date(app.date) >= new Date() && app.status !== 'cancelled')\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n    .slice(0, 3);\n  \n  const userPrescriptions = prescriptions\n    .filter(presc => presc.patientId === user?.id)\n    .slice(0, 3);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'cancelled': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Welcome, {user?.name}</h1>\n          <p className=\"text-gray-600 mt-1\">Manage your appointments and health records</p>\n        </div>\n        <Link\n          to=\"/patient/book\"\n          className=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n        >\n          <Plus className=\"w-5 h-5\" />\n          <span>Book Appointment</span>\n        </Link>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Appointments</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{userAppointments.length}</p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Upcoming</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{upcomingAppointments.length}</p>\n            </div>\n            <Clock className=\"w-8 h-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Confirmed</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {userAppointments.filter(app => app.status === 'confirmed').length}\n              </p>\n            </div>\n            <User className=\"w-8 h-8 text-teal-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Prescriptions</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{userPrescriptions.length}</p>\n            </div>\n            <FileText className=\"w-8 h-8 text-purple-600\" />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Upcoming Appointments */}\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Upcoming Appointments</h2>\n              <Link\n                to=\"/patient/appointments\"\n                className=\"text-blue-600 hover:text-blue-500 text-sm font-medium\"\n              >\n                View All\n              </Link>\n            </div>\n          </div>\n          <div className=\"p-6\">\n            {upcomingAppointments.length > 0 ? (\n              <div className=\"space-y-4\">\n                {upcomingAppointments.map((appointment) => (\n                  <div\n                    key={appointment.id}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-900\">{appointment.doctorName}</h3>\n                      <p className=\"text-sm text-gray-600\">{appointment.doctorSpecialization}</p>\n                      <p className=\"text-sm text-gray-500\">\n                        {format(new Date(appointment.date), 'MMM dd, yyyy')} at {appointment.time}\n                      </p>\n                    </div>\n                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}`}>\n                      {appointment.status}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No upcoming appointments</p>\n                <Link\n                  to=\"/patient/book\"\n                  className=\"text-blue-600 hover:text-blue-500 text-sm font-medium mt-2 inline-block\"\n                >\n                  Book your first appointment\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Recent Prescriptions */}\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Recent Prescriptions</h2>\n              <Link\n                to=\"/patient/prescriptions\"\n                className=\"text-blue-600 hover:text-blue-500 text-sm font-medium\"\n              >\n                View All\n              </Link>\n            </div>\n          </div>\n          <div className=\"p-6\">\n            {userPrescriptions.length > 0 ? (\n              <div className=\"space-y-4\">\n                {userPrescriptions.map((prescription) => (\n                  <div\n                    key={prescription.id}\n                    className=\"flex items-start justify-between p-4 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-900\">{prescription.doctorName}</h3>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        {prescription.medications.length > 50 \n                          ? prescription.medications.substring(0, 50) + '...' \n                          : prescription.medications}\n                      </p>\n                      <p className=\"text-sm text-gray-500 mt-1\">\n                        {format(new Date(prescription.createdAt), 'MMM dd, yyyy')}\n                      </p>\n                    </div>\n                    <FileText className=\"w-5 h-5 text-gray-400\" />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No prescriptions yet</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Quick Actions</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Link\n            to=\"/patient/book\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <Plus className=\"w-6 h-6 text-blue-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">Book Appointment</h3>\n              <p className=\"text-sm text-gray-600\">Schedule with a doctor</p>\n            </div>\n          </Link>\n\n          <Link\n            to=\"/patient/appointments\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <Calendar className=\"w-6 h-6 text-green-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">My Appointments</h3>\n              <p className=\"text-sm text-gray-600\">View and manage</p>\n            </div>\n          </Link>\n\n          <Link\n            to=\"/patient/prescriptions\"\n            className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <FileText className=\"w-6 h-6 text-purple-600\" />\n            <div>\n              <h3 className=\"font-medium text-gray-900\">Prescriptions</h3>\n              <p className=\"text-sm text-gray-600\">Download and view</p>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PatientDashboard;","size_bytes":9710},"client/src/pages/PatientPrescriptions.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useApp } from '../contexts/AppContext';\nimport { FileText, Download, Calendar, User, Search } from 'lucide-react';\nimport { format } from 'date-fns';\nimport jsPDF from 'jspdf';\n\nconst PatientPrescriptions: React.FC = () => {\n  const { user } = useAuth();\n  const { prescriptions } = useApp();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const userPrescriptions = prescriptions.filter(presc => presc.patientId === user?.id);\n  \n  const filteredPrescriptions = userPrescriptions.filter(presc =>\n    presc.doctorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    presc.medications.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const sortedPrescriptions = filteredPrescriptions.sort((a, b) => \n    new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n\n  const downloadPrescriptionPDF = (prescription: any) => {\n    const doc = new jsPDF();\n    \n    // Header\n    doc.setFontSize(20);\n    doc.text('PRESCRIPTION', 105, 20, { align: 'center' });\n    \n    // Patient Info\n    doc.setFontSize(12);\n    doc.text('Patient Information:', 20, 40);\n    doc.text(`Name: ${prescription.patientName}`, 20, 50);\n    doc.text(`Date: ${format(new Date(prescription.createdAt), 'MMMM dd, yyyy')}`, 20, 60);\n    \n    // Doctor Info\n    doc.text('Prescribed by:', 20, 80);\n    doc.text(`Dr. ${prescription.doctorName}`, 20, 90);\n    \n    // Medications\n    doc.text('Medications:', 20, 110);\n    \n    const medications = prescription.medications.split('\\n');\n    let yPosition = 120;\n    medications.forEach((med: string) => {\n      if (yPosition > 270) {\n        doc.addPage();\n        yPosition = 20;\n      }\n      doc.text(med, 20, yPosition);\n      yPosition += 10;\n    });\n    \n    // Instructions\n    if (prescription.instructions) {\n      yPosition += 10;\n      if (yPosition > 270) {\n        doc.addPage();\n        yPosition = 20;\n      }\n      doc.text('Instructions:', 20, yPosition);\n      yPosition += 10;\n      \n      const instructions = prescription.instructions.split('\\n');\n      instructions.forEach((instruction: string) => {\n        if (yPosition > 270) {\n          doc.addPage();\n          yPosition = 20;\n        }\n        doc.text(instruction, 20, yPosition);\n        yPosition += 10;\n      });\n    }\n    \n    doc.save(`prescription-${prescription.id}.pdf`);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">My Prescriptions</h1>\n        <p className=\"text-gray-600 mt-1\">View and download your prescriptions</p>\n      </div>\n\n      {/* Search */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search prescriptions by doctor or medication...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n      </div>\n\n      {/* Prescriptions List */}\n      <div className=\"space-y-4\">\n        {sortedPrescriptions.length > 0 ? (\n          sortedPrescriptions.map((prescription) => (\n            <div key={prescription.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                      <FileText className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        Prescription from {prescription.doctorName}\n                      </h3>\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <span>{format(new Date(prescription.createdAt), 'MMM dd, yyyy')}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <User className=\"w-4 h-4\" />\n                          <span>For: {prescription.patientName}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Medications:</h4>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <pre className=\"text-sm text-gray-700 whitespace-pre-wrap font-sans\">\n                          {prescription.medications}\n                        </pre>\n                      </div>\n                    </div>\n\n                    {prescription.instructions && (\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Instructions:</h4>\n                        <div className=\"bg-blue-50 p-4 rounded-lg\">\n                          <pre className=\"text-sm text-blue-800 whitespace-pre-wrap font-sans\">\n                            {prescription.instructions}\n                          </pre>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"ml-6\">\n                  <button\n                    onClick={() => downloadPrescriptionPDF(prescription)}\n                    className=\"flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n                  >\n                    <Download className=\"w-4 h-4\" />\n                    <span>Download PDF</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n            <FileText className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {searchTerm ? 'No matching prescriptions' : 'No prescriptions yet'}\n            </h3>\n            <p className=\"text-gray-600\">\n              {searchTerm \n                ? 'Try adjusting your search terms'\n                : 'Your prescriptions will appear here after doctor visits'\n              }\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PatientPrescriptions;","size_bytes":6985},"client/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  name: string;\n  phone: string;\n  role: 'admin' | 'doctor' | 'patient';\n  createdAt: string;\n}\n\nexport interface Doctor extends User {\n  specialization: string;\n  experience: number;\n  availability: TimeSlot[];\n  leaveDays: string[];\n  isActive: boolean;\n}\n\nexport interface Patient extends User {\n  dateOfBirth: string;\n  address: string;\n}\n\nexport interface TimeSlot {\n  day: string;\n  startTime: string;\n  endTime: string;\n}\n\nexport interface Appointment {\n  id: string;\n  patientId: string;\n  doctorId: string;\n  patientName: string;\n  doctorName: string;\n  doctorSpecialization: string;\n  date: string;\n  time: string;\n  status: 'pending' | 'confirmed' | 'rejected' | 'cancelled' | 'completed';\n  reason: string;\n  createdAt: string;\n}\n\nexport interface Prescription {\n  id: string;\n  appointmentId: string;\n  patientId: string;\n  doctorId: string;\n  patientName: string;\n  doctorName: string;\n  medications: string;\n  instructions: string;\n  fileUrl?: string;\n  fileType?: 'pdf' | 'image' | 'text';\n  createdAt: string;\n}","size_bytes":1083},"client/src/components/auth/AdminLogin.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Shield, Eye, EyeOff, Mail, Lock } from 'lucide-react';\n\nconst AdminLogin: React.FC = () => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const success = await login(formData.email, formData.password, 'admin');\n      if (success) {\n        navigate('/admin');\n      } else {\n        setError('Invalid email or password, or you are not an administrator');\n      }\n    } catch (err) {\n      setError('Login failed. Please try again.');\n    }\n    \n    setLoading(false);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-purple-600 rounded-2xl flex items-center justify-center mb-4\">\n            <Shield className=\"w-8 h-8 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900\">Admin Login</h2>\n          <p className=\"mt-2 text-gray-600\">System administration access</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-lg p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={formData.password}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                  placeholder=\"Enter your password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n                {error}\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              {loading ? 'Signing in...' : 'Sign In as Administrator'}\n            </button>\n          </form>\n\n          <div className=\"mt-6 space-y-4\">\n            <div className=\"text-center\">\n              <Link\n                to=\"/forgot-password\"\n                className=\"text-sm text-purple-600 hover:text-purple-500\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n\n            <div className=\"border-t border-gray-200 pt-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-gray-600\">Login as different role:</p>\n                <div className=\"flex justify-center space-x-4\">\n                  <Link\n                    to=\"/login\"\n                    className=\"text-sm text-green-600 hover:text-green-500\"\n                  >\n                    Patient Login\n                  </Link>\n                  <Link\n                    to=\"/doctor/login\"\n                    className=\"text-sm text-blue-600 hover:text-blue-500\"\n                  >\n                    Doctor Login\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 p-4 bg-purple-50 rounded-lg\">\n            <p className=\"text-sm text-purple-800\">\n              <strong>Default Login:</strong> Use admin@medbook.com / admin123 for demo access.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminLogin;","size_bytes":5913},"client/src/components/auth/DoctorLogin.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Stethoscope, Eye, EyeOff, Mail, Lock } from 'lucide-react';\n\nconst DoctorLogin: React.FC = () => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const success = await login(formData.email, formData.password, 'doctor');\n      if (success) {\n        navigate('/doctor');\n      } else {\n        setError('Invalid email or password, or you are not a doctor');\n      }\n    } catch (err) {\n      setError('Login failed. Please try again.');\n    }\n    \n    setLoading(false);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-cyan-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center mb-4\">\n            <Stethoscope className=\"w-8 h-8 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900\">Doctor Login</h2>\n          <p className=\"mt-2 text-gray-600\">Access your medical practice</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-lg p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={formData.password}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Enter your password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n                {error}\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              {loading ? 'Signing in...' : 'Sign In as Doctor'}\n            </button>\n          </form>\n\n          <div className=\"mt-6 space-y-4\">\n            <div className=\"text-center\">\n              <Link\n                to=\"/forgot-password\"\n                className=\"text-sm text-blue-600 hover:text-blue-500\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n\n            <div className=\"border-t border-gray-200 pt-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-gray-600\">Login as different role:</p>\n                <div className=\"flex justify-center space-x-4\">\n                  <Link\n                    to=\"/login\"\n                    className=\"text-sm text-green-600 hover:text-green-500\"\n                  >\n                    Patient Login\n                  </Link>\n                  <Link\n                    to=\"/admin/login\"\n                    className=\"text-sm text-purple-600 hover:text-purple-500\"\n                  >\n                    Admin Login\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Demo Login:</strong> Use doctor@medbook.com / doctor123 for testing.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DoctorLogin;","size_bytes":5886},"client/src/components/auth/ForgotPassword.tsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Calendar, Mail } from 'lucide-react';\n\nconst ForgotPassword: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const { forgotPassword } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setMessage('');\n\n    try {\n      const success = await forgotPassword(email);\n      if (success) {\n        setMessage('Password reset instructions have been sent to your email address.');\n      } else {\n        setError('Email address not found.');\n      }\n    } catch (err) {\n      setError('Failed to send reset email. Please try again.');\n    }\n    \n    setLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center mb-4\">\n            <Calendar className=\"w-8 h-8 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900\">Forgot Password</h2>\n          <p className=\"mt-2 text-gray-600\">Enter your email to reset your password</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-lg p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n                {error}\n              </div>\n            )}\n\n            {message && (\n              <div className=\"bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg\">\n                {message}\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              {loading ? 'Sending...' : 'Send Reset Instructions'}\n            </button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <Link\n              to=\"/login\"\n              className=\"text-sm text-blue-600 hover:text-blue-500\"\n            >\n              Back to Sign In\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPassword;","size_bytes":3584},"client/src/components/auth/Login.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Calendar, Eye, EyeOff, Mail, Lock } from 'lucide-react';\n\nconst Login: React.FC = () => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const success = await login(formData.email, formData.password);\n      if (success) {\n        // Redirect based on role would be handled by routing logic\n        navigate('/');\n      } else {\n        setError('Invalid email or password');\n      }\n    } catch (err) {\n      setError('Login failed. Please try again.');\n    }\n    \n    setLoading(false);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  // Demo credentials\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center mb-4\">\n            <Calendar className=\"w-8 h-8 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900\">Welcome to MedBook</h2>\n          <p className=\"mt-2 text-gray-600\">Sign in to your account</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-lg p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={formData.password}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Enter your password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n                {error}\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              {loading ? 'Signing in...' : 'Sign In'}\n            </button>\n          </form>\n\n          <div className=\"mt-6 flex items-center justify-between\">\n            <Link\n              to=\"/forgot-password\"\n              className=\"text-sm text-blue-600 hover:text-blue-500\"\n            >\n              Forgot your password?\n            </Link>\n            <Link\n              to=\"/register\"\n              className=\"text-sm text-blue-600 hover:text-blue-500\"\n            >\n              Create account\n            </Link>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","size_bytes":5052},"client/src/components/auth/Register.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Calendar, Eye, EyeOff, Mail, Lock, User, Phone, MapPin, Calendar as CalendarIcon } from 'lucide-react';\n\nconst Register: React.FC = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    password: '',\n    confirmPassword: '',\n    dateOfBirth: '',\n    address: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const { register } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      setLoading(false);\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const userData = {\n        ...formData,\n        role: 'patient'\n      };\n      delete userData.confirmPassword;\n      \n      const success = await register(userData);\n      if (success) {\n        navigate('/patient');\n      } else {\n        setError('Registration failed. Please try again.');\n      }\n    } catch (err) {\n      setError('Registration failed. Please try again.');\n    }\n    \n    setLoading(false);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4 py-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center mb-4\">\n            <Calendar className=\"w-8 h-8 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900\">Create Account</h2>\n          <p className=\"mt-2 text-gray-600\">Join MedBook as a patient</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-lg p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Full Name\n              </label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  required\n                  value={formData.name}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Enter your full name\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Phone Number\n              </label>\n              <div className=\"relative\">\n                <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"phone\"\n                  name=\"phone\"\n                  type=\"tel\"\n                  required\n                  value={formData.phone}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Enter your phone number\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"dateOfBirth\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Date of Birth\n              </label>\n              <div className=\"relative\">\n                <CalendarIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"dateOfBirth\"\n                  name=\"dateOfBirth\"\n                  type=\"date\"\n                  required\n                  value={formData.dateOfBirth}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"address\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Address\n              </label>\n              <div className=\"relative\">\n                <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"address\"\n                  name=\"address\"\n                  type=\"text\"\n                  required\n                  value={formData.address}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Enter your address\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={formData.password}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Create a password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Confirm Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  required\n                  value={formData.confirmPassword}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Confirm your password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n                {error}\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              {loading ? 'Creating account...' : 'Create Account'}\n            </button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Already have an account?{' '}\n              <Link to=\"/login\" className=\"text-blue-600 hover:text-blue-500\">\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;","size_bytes":9909},"client/src/components/auth/UserLogin.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Calendar, Eye, EyeOff, Mail, Lock, User } from 'lucide-react';\n\nconst UserLogin: React.FC = () => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const success = await login(formData.email, formData.password, 'patient');\n      if (success) {\n        navigate('/patient');\n      } else {\n        setError('Invalid email or password, or you are not a patient');\n      }\n    } catch (err) {\n      setError('Login failed. Please try again.');\n    }\n    \n    setLoading(false);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-green-600 rounded-2xl flex items-center justify-center mb-4\">\n            <User className=\"w-8 h-8 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900\">Patient Login</h2>\n          <p className=\"mt-2 text-gray-600\">Access your medical appointments</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-lg p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email Address\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={formData.password}\n                  onChange={handleChange}\n                  className=\"w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\n                  placeholder=\"Enter your password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg\">\n                {error}\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-green-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-green-700 focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              {loading ? 'Signing in...' : 'Sign In as Patient'}\n            </button>\n          </form>\n\n          <div className=\"mt-6 space-y-4\">\n            <div className=\"text-center\">\n              <Link\n                to=\"/forgot-password\"\n                className=\"text-sm text-green-600 hover:text-green-500\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n            \n            <div className=\"text-center\">\n              <Link\n                to=\"/register\"\n                className=\"text-sm text-green-600 hover:text-green-500 block\"\n              >\n                Don't have an account? Register as Patient\n              </Link>\n              \n              <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n                <p className=\"text-sm text-green-800\">\n                  <strong>Demo Login:</strong> Use patient@medbook.com / patient123 for testing.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"border-t border-gray-200 pt-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-gray-600\">Login as different role:</p>\n                <div className=\"flex justify-center space-x-4\">\n                  <Link\n                    to=\"/doctor/login\"\n                    className=\"text-sm text-blue-600 hover:text-blue-500\"\n                  >\n                    Doctor Login\n                  </Link>\n                  <Link\n                    to=\"/admin/login\"\n                    className=\"text-sm text-purple-600 hover:text-purple-500\"\n                  >\n                    Admin Login\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserLogin;","size_bytes":6241},"client/src/pages/admin/AdminDoctorManagement.tsx":{"content":"import React, { useState } from 'react';\nimport { useApp } from '../../contexts/AppContext';\nimport { apiClient } from '../../lib/api';\nimport { Stethoscope, Plus, Edit, Trash2, Search, Filter, UserCheck, UserX, X, Eye, EyeOff } from 'lucide-react';\n\nconst AdminDoctorManagement: React.FC = () => {\n  const { doctors, loading, refreshData } = useApp();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    phone: '',\n    specialization: '',\n    experience: 0\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState('');\n\n  const filteredDoctors = doctors.filter(doctor => {\n    const matchesSearch = doctor.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         doctor.specialization.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         doctor.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || \n                         (statusFilter === 'active' && doctor.isActive) ||\n                         (statusFilter === 'inactive' && !doctor.isActive);\n    return matchesSearch && matchesStatus;\n  });\n\n  const activeDoctors = doctors.filter(doc => doc.isActive).length;\n  const inactiveDoctors = doctors.filter(doc => !doc.isActive).length;\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === 'experience' ? parseInt(value) || 0 : value\n    }));\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      email: '',\n      password: '',\n      phone: '',\n      specialization: '',\n      experience: 0\n    });\n    setError('');\n    setShowAddForm(false);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    setError('');\n\n    try {\n      const response = await apiClient.createDoctorAccount(formData);\n      if (response.success) {\n        resetForm();\n        await refreshData();\n        alert('Doctor account created successfully!');\n      } else {\n        setError('Failed to create doctor account');\n      }\n    } catch (error: any) {\n      setError(error.message || 'Failed to create doctor account');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Doctor Management</h1>\n          <p className=\"text-gray-600 mt-1\">Manage doctor profiles and permissions</p>\n        </div>\n        <button\n          onClick={() => setShowAddForm(true)}\n          className=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n        >\n          <Plus className=\"w-5 h-5\" />\n          <span>Add Doctor</span>\n        </button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Doctors</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{doctors.length}</p>\n            </div>\n            <Stethoscope className=\"w-8 h-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Doctors</p>\n              <p className=\"text-2xl font-bold text-green-600\">{activeDoctors}</p>\n            </div>\n            <UserCheck className=\"w-8 h-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Inactive Doctors</p>\n              <p className=\"text-2xl font-bold text-red-600\">{inactiveDoctors}</p>\n            </div>\n            <UserX className=\"w-8 h-8 text-red-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center space-y-4 md:space-y-0 md:space-x-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search doctors by name, specialization, or email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n          <div className=\"md:w-48\">\n            <div className=\"relative\">\n              <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <select\n                value={statusFilter}\n                onChange={(e) => setStatusFilter(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none\"\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"active\">Active</option>\n                <option value=\"inactive\">Inactive</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Doctors Table */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50 border-b border-gray-200\">\n              <tr>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Doctor</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Specialization</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Experience</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Status</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Contact</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Actions</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {filteredDoctors.map((doctor) => (\n                <tr key={doctor.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <Stethoscope className=\"w-5 h-5 text-blue-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{doctor.name}</p>\n                        <p className=\"text-sm text-gray-500\">ID: {doctor.id.slice(0, 8)}</p>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className=\"text-gray-900\">{doctor.specialization}</span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className=\"text-gray-900\">{doctor.experience} years</span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                      doctor.isActive \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-red-100 text-red-800'\n                    }`}>\n                      {doctor.isActive ? 'Active' : 'Inactive'}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"text-sm\">\n                      <p className=\"text-gray-900\">{doctor.email}</p>\n                      <p className=\"text-gray-500\">{doctor.phone}</p>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <button className=\"p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors\">\n                        <Edit className=\"w-4 h-4\" />\n                      </button>\n                      <button className=\"p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors\">\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {filteredDoctors.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Stethoscope className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No doctors found</h3>\n            <p className=\"text-gray-600\">Try adjusting your search criteria</p>\n          </div>\n        )}\n      </div>\n\n      {/* Add Doctor Modal */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl shadow-xl w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n              <h2 className=\"text-xl font-bold text-gray-900\">Add New Doctor</h2>\n              <button\n                onClick={resetForm}\n                className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg transition-colors\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n            \n            <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\n              {error && (\n                <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg\">\n                  {error}\n                </div>\n              )}\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Full Name *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  required\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Dr. John Smith\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Email Address *\n                </label>\n                <input\n                  type=\"email\"\n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  required\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"doctor@medbook.com\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Password *\n                </label>\n                <div className=\"relative\">\n                  <input\n                    type={showPassword ? \"text\" : \"password\"}\n                    name=\"password\"\n                    value={formData.password}\n                    onChange={handleInputChange}\n                    required\n                    className=\"w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Enter password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Phone Number *\n                </label>\n                <input\n                  type=\"tel\"\n                  name=\"phone\"\n                  value={formData.phone}\n                  onChange={handleInputChange}\n                  required\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"+1-555-0100\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Specialization *\n                </label>\n                <select\n                  name=\"specialization\"\n                  value={formData.specialization}\n                  onChange={handleInputChange}\n                  required\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"\">Select Specialization</option>\n                  <option value=\"General Medicine\">General Medicine</option>\n                  <option value=\"Cardiology\">Cardiology</option>\n                  <option value=\"Dermatology\">Dermatology</option>\n                  <option value=\"Neurology\">Neurology</option>\n                  <option value=\"Orthopedics\">Orthopedics</option>\n                  <option value=\"Pediatrics\">Pediatrics</option>\n                  <option value=\"Psychiatry\">Psychiatry</option>\n                  <option value=\"Surgery\">Surgery</option>\n                  <option value=\"Other\">Other</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Experience (Years)\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"experience\"\n                  value={formData.experience}\n                  onChange={handleInputChange}\n                  min=\"0\"\n                  max=\"50\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"5\"\n                />\n              </div>\n\n              <div className=\"flex space-x-3 pt-4\">\n                <button\n                  type=\"button\"\n                  onClick={resetForm}\n                  className=\"flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isSubmitting ? 'Creating...' : 'Create Doctor'}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdminDoctorManagement;","size_bytes":16445},"client/src/pages/admin/AdminPatientManagement.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { apiClient } from '../../lib/api';\nimport { User, Search, Filter, Calendar, Phone, Mail } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface Patient {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  dateOfBirth: string;\n  address: string;\n  createdAt: string;\n  appointmentCount: number;\n}\n\nconst AdminPatientManagement: React.FC = () => {\n  const [patients, setPatients] = useState<Patient[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    fetchPatients();\n  }, []);\n\n  const fetchPatients = async () => {\n    try {\n      // Get patients and appointments from our API\n      const [patientsData, appointmentsData] = await Promise.all([\n        apiClient.getPatients(),\n        apiClient.getAppointments()\n      ]);\n\n      // Count appointments for each patient\n      const countMap = appointmentsData?.reduce((acc, apt) => {\n        acc[apt.patientId] = (acc[apt.patientId] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>) || {};\n\n      const mappedPatients = patientsData?.map(patient => ({\n        id: patient.id,\n        name: patient.user.name,\n        email: patient.user.email,\n        phone: patient.user.phone,\n        dateOfBirth: patient.dateOfBirth || '',\n        address: patient.address || '',\n        createdAt: patient.createdAt,\n        appointmentCount: countMap[patient.userId] || 0\n      })) || [];\n\n      setPatients(mappedPatients);\n    } catch (error) {\n      console.error('Error fetching patients:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredPatients = patients.filter(patient =>\n    patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    patient.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    patient.phone.includes(searchTerm)\n  );\n\n  const totalAppointments = patients.reduce((sum, patient) => sum + patient.appointmentCount, 0);\n  const avgAppointmentsPerPatient = patients.length > 0 ? (totalAppointments / patients.length).toFixed(1) : '0';\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Patient Management</h1>\n        <p className=\"text-gray-600 mt-1\">View and manage patient records</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Patients</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{patients.length}</p>\n            </div>\n            <User className=\"w-8 h-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Appointments</p>\n              <p className=\"text-2xl font-bold text-blue-600\">{totalAppointments}</p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Avg. Appointments</p>\n              <p className=\"text-2xl font-bold text-purple-600\">{avgAppointmentsPerPatient}</p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-purple-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search patients by name, email, or phone...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n      </div>\n\n      {/* Patients Table */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50 border-b border-gray-200\">\n              <tr>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Patient</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Contact</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Date of Birth</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Address</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Appointments</th>\n                <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-900\">Registered</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {filteredPatients.map((patient) => (\n                <tr key={patient.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                        <User className=\"w-5 h-5 text-green-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{patient.name}</p>\n                        <p className=\"text-sm text-gray-500\">ID: {patient.id.slice(0, 8)}</p>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"text-sm\">\n                      <div className=\"flex items-center space-x-1 mb-1\">\n                        <Mail className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-gray-900\">{patient.email}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Phone className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-gray-500\">{patient.phone}</span>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className=\"text-gray-900\">\n                      {patient.dateOfBirth ? format(new Date(patient.dateOfBirth), 'MMM dd, yyyy') : 'N/A'}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className=\"text-gray-900 text-sm\">{patient.address || 'N/A'}</span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                      {patient.appointmentCount} appointments\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className=\"text-gray-900 text-sm\">\n                      {format(new Date(patient.createdAt), 'MMM dd, yyyy')}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {filteredPatients.length === 0 && (\n          <div className=\"text-center py-12\">\n            <User className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No patients found</h3>\n            <p className=\"text-gray-600\">Try adjusting your search criteria</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminPatientManagement;","size_bytes":8465},"client/src/pages/doctor/DoctorPrescriptions.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useApp } from '../../contexts/AppContext';\nimport { FileText, Plus, Search, Calendar, User, Edit } from 'lucide-react';\nimport { format } from 'date-fns';\n\nconst DoctorPrescriptions: React.FC = () => {\n  const { user } = useAuth();\n  const { prescriptions, appointments, addPrescription } = useApp();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [selectedAppointment, setSelectedAppointment] = useState('');\n  const [formData, setFormData] = useState({\n    medications: '',\n    instructions: ''\n  });\n\n  const doctorPrescriptions = prescriptions.filter(presc => presc.doctorId === user?.id);\n  const completedAppointments = appointments.filter(apt => \n    apt.doctorId === user?.id && apt.status === 'completed'\n  );\n\n  const filteredPrescriptions = doctorPrescriptions.filter(presc =>\n    presc.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    presc.medications.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const sortedPrescriptions = filteredPrescriptions.sort((a, b) => \n    new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedAppointment || !formData.medications.trim() || !formData.instructions.trim()) {\n      alert('Please fill in all fields');\n      return;\n    }\n\n    const appointment = appointments.find(apt => apt.id === selectedAppointment);\n    if (!appointment) {\n      alert('Selected appointment not found');\n      return;\n    }\n\n    const success = await addPrescription({\n      appointmentId: selectedAppointment,\n      patientId: appointment.patientId,\n      doctorId: user!.id,\n      medications: formData.medications,\n      instructions: formData.instructions\n    });\n\n    if (success) {\n      setShowCreateForm(false);\n      setFormData({ medications: '', instructions: '' });\n      setSelectedAppointment('');\n    } else {\n      alert('Failed to create prescription. Please try again.');\n    }\n  };\n\n  if (showCreateForm) {\n    return (\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-6\">\n          <button\n            onClick={() => setShowCreateForm(false)}\n            className=\"text-blue-600 hover:text-blue-500 mb-4\"\n          >\n            ← Back to Prescriptions\n          </button>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Create Prescription</h1>\n          <p className=\"text-gray-600 mt-1\">Add a new prescription for a patient</p>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"appointment\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Select Appointment\n              </label>\n              <select\n                id=\"appointment\"\n                value={selectedAppointment}\n                onChange={(e) => setSelectedAppointment(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"\">Choose a completed appointment...</option>\n                {completedAppointments.map(appointment => (\n                  <option key={appointment.id} value={appointment.id}>\n                    {appointment.patientName} - {format(new Date(appointment.date), 'MMM dd, yyyy')} at {appointment.time}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"medications\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Medications\n              </label>\n              <textarea\n                id=\"medications\"\n                value={formData.medications}\n                onChange={(e) => setFormData(prev => ({ ...prev, medications: e.target.value }))}\n                rows={6}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"List medications with dosage and frequency...\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"instructions\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Instructions\n              </label>\n              <textarea\n                id=\"instructions\"\n                value={formData.instructions}\n                onChange={(e) => setFormData(prev => ({ ...prev, instructions: e.target.value }))}\n                rows={4}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Special instructions for the patient...\"\n                required\n              />\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <button\n                type=\"button\"\n                onClick={() => setShowCreateForm(false)}\n                className=\"flex-1 bg-gray-200 text-gray-800 py-3 px-4 rounded-lg font-medium hover:bg-gray-300 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                className=\"flex-1 bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n              >\n                Create Prescription\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">My Prescriptions</h1>\n          <p className=\"text-gray-600 mt-1\">Create and manage patient prescriptions</p>\n        </div>\n        <button\n          onClick={() => setShowCreateForm(true)}\n          className=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n        >\n          <Plus className=\"w-5 h-5\" />\n          <span>New Prescription</span>\n        </button>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Prescriptions</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{doctorPrescriptions.length}</p>\n            </div>\n            <FileText className=\"w-8 h-8 text-purple-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">This Month</p>\n              <p className=\"text-2xl font-bold text-blue-600\">\n                {doctorPrescriptions.filter(p => \n                  new Date(p.createdAt).getMonth() === new Date().getMonth()\n                ).length}\n              </p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Available to Create</p>\n              <p className=\"text-2xl font-bold text-green-600\">{completedAppointments.length}</p>\n            </div>\n            <Plus className=\"w-8 h-8 text-green-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search prescriptions by patient name or medication...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n      </div>\n\n      {/* Prescriptions List */}\n      <div className=\"space-y-4\">\n        {sortedPrescriptions.length > 0 ? (\n          sortedPrescriptions.map((prescription) => (\n            <div key={prescription.id} className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                      <FileText className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        Prescription for {prescription.patientName}\n                      </h3>\n                      <p className=\"text-gray-600\">\n                        Created on {format(new Date(prescription.createdAt), 'MMM dd, yyyy')}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Medications:</h4>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <pre className=\"text-sm text-gray-700 whitespace-pre-wrap font-sans\">\n                          {prescription.medications}\n                        </pre>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Instructions:</h4>\n                      <div className=\"bg-blue-50 p-4 rounded-lg\">\n                        <pre className=\"text-sm text-blue-800 whitespace-pre-wrap font-sans\">\n                          {prescription.instructions}\n                        </pre>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"ml-6\">\n                  <button className=\"flex items-center space-x-2 text-blue-600 hover:text-blue-500\">\n                    <Edit className=\"w-4 h-4\" />\n                    <span>Edit</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n            <FileText className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {searchTerm ? 'No matching prescriptions' : 'No prescriptions yet'}\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              {searchTerm \n                ? 'Try adjusting your search terms'\n                : 'Create your first prescription for a completed appointment'\n              }\n            </p>\n            {!searchTerm && completedAppointments.length > 0 && (\n              <button\n                onClick={() => setShowCreateForm(true)}\n                className=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n              >\n                Create First Prescription\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DoctorPrescriptions;","size_bytes":12012}}}